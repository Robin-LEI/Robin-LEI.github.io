{"meta":{"title":"Robin LEI","subtitle":"用代码改变世界，因为喜欢所以热爱!","description":null,"author":"Robin LEI","url":"http://yoursite.com","root":"/"},"pages":[{"title":"tags","date":"2019-08-29T14:55:28.000Z","updated":"2019-08-29T14:56:01.156Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-08-29T14:55:41.000Z","updated":"2019-08-29T14:56:45.662Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"web安全","slug":"web安全","date":"2019-09-03T13:51:12.000Z","updated":"2019-09-03T13:52:24.409Z","comments":true,"path":"2019/09/03/web安全/","link":"","permalink":"http://yoursite.com/2019/09/03/web安全/","excerpt":"","text":"常见web攻击方式 XSS-反射型 跨站脚本攻击 反射型xss(恶意的url)，一次性的，由用户发起 chrome内置了一些xss过滤器，可以防止大部分反射型xss攻击 firefox安全性不如chrome 特点：用户手动触发，危害小，不持久 存储型 黑客将恶意脚本代码上传(比如通过评论，存入到对方服务器) 当客户端重新使用数据时，服务器会返回恶意代码，再次执行 特点时持久，不需要用户触发，危害更大 DOM-base xss 用户打开一个恶意的链接 浏览器在dom解析的时候直接使用恶意数据 innerHTML、document.write… payload 实现xss攻击的恶意脚本就叫做payload xss钓鱼–通过xss向网页注入钓鱼链接，引导用户访问 通过payload拿到用户的sessionId后，就可以伪造成用户，进行操作 因为sessionId是唯一标识–后台识别客户 用户登陆后，后台会返回一个sessionId存储在客户端的cookie中 以后客户端每次请求都会把该cookie带上请求后端 所以cookie泄露会有很大风险 如何防御xss 设置cookie的httpOnly属性 这样在客户端就不能通过document.cookie获取到cookie 但是不能根本解决 永远不要相信前端的过滤，后台一定要进行过滤 设置白名单 设置黑名单 在标签里面、在属性上、在url地址、在函数参数传参写入时再次进行一层htmlEncode过滤 URL编码 encodeURI编码url的不对&amp;等保留字与特殊字符编码 encodeURIComponent用来编码传递参数的以及&amp;特殊符号 对一个get url的参数处理往往是二者一起使用","categories":[],"tags":[{"name":"web安全","slug":"web安全","permalink":"http://yoursite.com/tags/web安全/"}]},{"title":"encrypt","slug":"encrypt","date":"2019-09-01T08:10:05.000Z","updated":"2019-09-01T08:21:43.719Z","comments":true,"path":"2019/09/01/encrypt/","link":"","permalink":"http://yoursite.com/2019/09/01/encrypt/","excerpt":"","text":"常见的前端加密库 crypto-js sjcl md5 sha1哈希加密 base64","categories":[],"tags":[{"name":"前端加密","slug":"前端加密","permalink":"http://yoursite.com/tags/前端加密/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"canvas","slug":"canvas","date":"2019-09-01T07:11:25.000Z","updated":"2019-09-01T07:38:59.854Z","comments":true,"path":"2019/09/01/canvas/","link":"","permalink":"http://yoursite.com/2019/09/01/canvas/","excerpt":"","text":"简介 HTML5新标签 本身不具备绘画功能 是一个矩形区域的画布 拥有多种绘制图形图像的方法 应用领域 游戏 广告 可视化数据 设置宽高 设置宽度和高度，通过属性设置，不要通过css设置 对于一个canvas标签来说，使用的时候一定要设置width和height属性，否则绘制的图形有问题 兼容性 IE9才支持 不支持会认为是div 兼容性写法1234&lt;canvas&gt; ie9以上才支持canvas，请升级浏览器 &lt;!-- flash --&gt;&lt;/canvas&gt; 步骤 拿到canvas标签 拿到上下文 绘制 常用方法 moveTo // 移动画笔到指定位置，不设置，没有位置 lineTo // 画线 stroke // 描边 closePath // 路径闭合 fill // 填充 常用属性 strokeStyle // 设置描边颜色 lineWidth // 线宽 fillStyle // 设置填充颜色 (a)12345var a = function() &#123; console.log(1)&#125;var b = (a) // b = f() &#123;console.log(1)&#125;b() // 1 绘制表格","categories":[],"tags":[{"name":"canvas","slug":"canvas","permalink":"http://yoursite.com/tags/canvas/"},{"name":"html5","slug":"html5","permalink":"http://yoursite.com/tags/html5/"}]},{"title":"yarn","slug":"yarn","date":"2019-08-29T13:39:30.000Z","updated":"2019-08-29T15:03:43.214Z","comments":true,"path":"2019/08/29/yarn/","link":"","permalink":"http://yoursite.com/2019/08/29/yarn/","excerpt":"","text":"带着问题学yarn？ yarn是什么？ yarn有什么优点？ yarn可以做什么？ 什么是一个package？ 什么是一个包管理器？ 公共包仓库是什么？ 为什么需要包管理器？ package会进行缓存 npm i yarn -g yarn -V yarn init // 初始化一个package.json包 yarn add yarn.lock // 存放各种包的信息 yarn upgrade webpack // 升级包 yarn cache ls // 查看本地安装了哪些缓存包 yarn cache dir // 查看package装在了本地什么路径 yarn cache clean // 清空本地缓存包 yarn add 已经缓存在本地的包 –offline // 离线安装 yarn install / yarn i / yarn // 安装项目依赖 dependences // 代码真正需要在浏览器上跑起来需要的一些依赖 devDependencies // 开发时需要的依赖 yarn remove [package] // 删除包 yarn install –production(prod) // 不会安装在devDependencies yarn publish // publish a package to a package manager, the same as npm publish yarn config yarn config set registry registry.npm.taobao.org // 设置yarn安装源，提升安装包的时候的速度 yarn info [package] // 查看包的信息，可以时远程的包 yarn global add webpack // 把webpack安装在全局 yarn 不推荐把依赖包安装在全局，不清晰，在其他机器很难保证项目可以正确运行，放在package.json更加清晰明确 yarn self-upate // yarn的自我更新 yarn why [package] // 帮助寻找项目依赖,告诉我们为什么需要依赖 yarn check // 检查包的完整性 yarn run example：create-dir：mkdir demo rm-dir：rm -rf demo yarn global ls // 查看全局安装的包","categories":[{"name":"包管理工具","slug":"包管理工具","permalink":"http://yoursite.com/categories/包管理工具/"}],"tags":[{"name":"包管理工具","slug":"包管理工具","permalink":"http://yoursite.com/tags/包管理工具/"}]},{"title":"dart","slug":"dart","date":"2019-08-25T13:57:11.000Z","updated":"2019-08-29T15:03:23.779Z","comments":true,"path":"2019/08/25/dart/","link":"","permalink":"http://yoursite.com/2019/08/25/dart/","excerpt":"","text":"环境安装 http://www.gekorm.com/dart-windows/ 安装dart sdk vscode开发 vscode 安装dart、code runner扩展插件 Google开发 被flutter带火 2011年诞生 类型 dart是一个强大的脚本语言 定义变量不指定类型，会自动推断，不能赋与其推断类型不一致的类型 String int dart存在类型校验 变量命名规则 字母、数字、下划线、$组成 区分大小写 不能以数字开头 dart常量 const 定义一个常量，编译时常量，一旦赋值不能修改 final 同样也是定义一个常量，但是比const强大，运行时常量，且属于惰性赋值 数据类型 三单(双)引号定义字符串，可以换行写字符串，单双引号则不行，只能写单行字符串 字符串拼接 $ + String int bool [] new List(),add,下标从0开始，集合类型 new List() 对象属性必须加引号 new Map()[“name”] = ‘hello wolrd’ is 类型判断 运算符 ??, example: b??=20 // 如果b为空的话就把20赋值给b 类型转换 Number to String，toString() String to Number，int.parse(str),double.parse() try{}catch(err){} string.isEmpty() // 判断字符串是否为空 number.isNaN() 集合类型 List List list = [] length isEmpty isNotEmpty reversed // 逆转 toList() // 转为List集合 add() // 相当于push，一次加一个 addAll([‘test’, ‘hello’]) // 拼接数组 indexOf // 获取索引值，查不到返回-1 remove(value) removeAt(index) fillRange() insert() insertAll(1, [‘hello’, ‘world’]) join() // 转为字符串 split() // 字符串转为List数组 Set 去重 new Set() add() 函数与方法 首字母小写，小驼峰 返回值类型 函数名() {函数体; return 返回值} 定义一个带可选参数的方法，String print(String username, [int age, String sex]) return “姓名:$username—年龄:$age” 定义一个命名参数的方法：String test(String name, {int age, String sex = ‘male’}) 类与对象 OOP，面向对象的三个基本特征–封装、继承、多态 类由属性和方法组成 所有东西都是对象，都是继承自object dart是一门使用类和单继承的面向对象，所有对象都是类的实例 构造方法/函数在程序一运行(实例化)的时候就会执行 dart里面构造函数可以写多个 Dart和其他面向OOP的语言不一样，没有public、private、protected这些访问修饰符，但是我们可以使用 _ 定义私有的属性和方法，然后还得抽离成一个文件才会生效 num get 方法名 // 计算属性 set 方法名(value) dart的抽象类 定义一个Animal类，并且要求他的子类必须实现他的eat方法 抽象类是一个标准，对子类的一个约束 抽象类有多个方法时子类必须要全部实现 抽象类里面可以有普通方法 抽象类不能直接实例化 多态 父类定义一个方法不去实现，让继承他的子类去实现它，每一个子类有不同的表现 官方表态：允许将子类类型的指针赋值给父类类型的指针，同一个函数的调用会有不同的执行效果，也就是说子类的实例赋值给父类的引用 接口 dart中没有interface关键字 抽象类会被作为接口被实现 定义一个DB库 支持mysql mongodb mssql，这三个类中都有同样的方法 接口就是约定，一种规范 通过implements 一个类实现多个接口 implements， 逗号隔开类名 实现所有方法和属性 mixins 新特性 with 和继承有点相似 作为mixins的类只能继承自Object，不能继承其他类 作为mixins的类不能有构造函数 mixins的类型就是其超类的子类型 泛型 传入什么类型，返回什么类型 12345678T getData&lt;T&gt;(T value) &#123; return value&#125;getData&lt;String&gt;(&apos;tet&apos;) // String给了T// 下面这种写法就不会对返回值类型进行校验getData&lt;T&gt;(T value) &#123; return value&#125; 泛型接口 demo 实现数据缓存的功能：有文件缓存、内存缓存、 定义一个泛型接口。约束实现他的子类必须有geyByKey(key)和setByKey(key, value) 要求setByKey的时候value的类型和实例化子类的时候指定的类型一致 解决代码重用 库 自定义 内置 import ‘dart:io’ import ‘dart:math’ pub async是让方法变成异步 await是等待异步方法执行完成 从下面网站中找到我们想要的库： https://pub.dev/packages https://pub.flutter-io.cn/packages https://pub.dartlang.org/flutter/ pubspec.lock pub get // 安装依赖 import ‘’ show getAge; // 从库中只引入getAge方法 import ‘’ as xxx; // 起个别名，解决冲突 import ‘’ hide getName; // 隐藏getName","categories":[{"name":"Dart","slug":"Dart","permalink":"http://yoursite.com/categories/Dart/"}],"tags":[{"name":"like C","slug":"like-C","permalink":"http://yoursite.com/tags/like-C/"}]},{"title":"Hello World --- Robin LEI","slug":"hello-world","date":"2019-08-24T08:05:11.966Z","updated":"2019-08-24T10:04:16.507Z","comments":true,"path":"2019/08/24/hello-world/","link":"","permalink":"http://yoursite.com/2019/08/24/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}
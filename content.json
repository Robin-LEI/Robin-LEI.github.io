{"meta":{"title":"Robin LEI","subtitle":null,"description":null,"author":"Robin LEI","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"dart","slug":"dart","date":"2019-08-25T13:57:11.000Z","updated":"2019-08-25T13:57:19.932Z","comments":true,"path":"2019/08/25/dart/","link":"","permalink":"http://yoursite.com/2019/08/25/dart/","excerpt":"","text":"环境安装 http://www.gekorm.com/dart-windows/ 安装dart sdk vscode开发 vscode 安装dart、code runner扩展插件 Google开发 被flutter带火 2011年诞生 类型 dart是一个强大的脚本语言 定义变量不指定类型，会自动推断，不能赋与其推断类型不一致的类型 String int dart存在类型校验 变量命名规则 字母、数字、下划线、$组成 区分大小写 不能以数字开头 dart常量 const 定义一个常量，编译时常量，一旦赋值不能修改 final 同样也是定义一个常量，但是比const强大，运行时常量，且属于惰性赋值 数据类型 三单(双)引号定义字符串，可以换行写字符串，单双引号则不行，只能写单行字符串 字符串拼接 $ + String int bool [] new List(),add,下标从0开始，集合类型 new List() 对象属性必须加引号 new Map()[“name”] = ‘hello wolrd’ is 类型判断 运算符 ??, example: b??=20 // 如果b为空的话就把20赋值给b 类型转换 Number to String，toString() String to Number，int.parse(str),double.parse() try{}catch(err){} string.isEmpty() // 判断字符串是否为空 number.isNaN() 集合类型 List List list = [] length isEmpty isNotEmpty reversed // 逆转 toList() // 转为List集合 add() // 相当于push，一次加一个 addAll([‘test’, ‘hello’]) // 拼接数组 indexOf // 获取索引值，查不到返回-1 remove(value) removeAt(index) fillRange() insert() insertAll(1, [‘hello’, ‘world’]) join() // 转为字符串 split() // 字符串转为List数组 Set 去重 new Set() add() 函数与方法 首字母小写，小驼峰 返回值类型 函数名() {函数体; return 返回值} 定义一个带可选参数的方法，String print(String username, [int age, String sex]) return “姓名:$username—年龄:$age” 定义一个命名参数的方法：String test(String name, {int age, String sex = ‘male’}) 类与对象 OOP，面向对象的三个基本特征–封装、继承、多态 类由属性和方法组成 所有东西都是对象，都是继承自object dart是一门使用类和单继承的面向对象，所有对象都是类的实例 构造方法/函数在程序一运行(实例化)的时候就会执行 dart里面构造函数可以写多个 Dart和其他面向OOP的语言不一样，没有public、private、protected这些访问修饰符，但是我们可以使用 _ 定义私有的属性和方法，然后还得抽离成一个文件才会生效 num get 方法名 // 计算属性 set 方法名(value) dart的抽象类 定义一个Animal类，并且要求他的子类必须实现他的eat方法 抽象类是一个标准，对子类的一个约束 抽象类有多个方法时子类必须要全部实现 抽象类里面可以有普通方法 抽象类不能直接实例化 多态 父类定义一个方法不去实现，让继承他的子类去实现它，每一个子类有不同的表现 官方表态：允许将子类类型的指针赋值给父类类型的指针，同一个函数的调用会有不同的执行效果，也就是说子类的实例赋值给父类的引用 接口 dart中没有interface关键字 抽象类会被作为接口被实现 定义一个DB库 支持mysql mongodb mssql，这三个类中都有同样的方法 接口就是约定，一种规范 通过implements 一个类实现多个接口 implements， 逗号隔开类名 实现所有方法和属性 mixins 新特性 with 和继承有点相似 作为mixins的类只能继承自Object，不能继承其他类 作为mixins的类不能有构造函数 mixins的类型就是其超类的子类型 泛型 传入什么类型，返回什么类型 12345678T getData&lt;T&gt;(T value) &#123; return value&#125;getData&lt;String&gt;(&apos;tet&apos;) // String给了T// 下面这种写法就不会对返回值类型进行校验getData&lt;T&gt;(T value) &#123; return value&#125; 泛型接口 demo 实现数据缓存的功能：有文件缓存、内存缓存、 定义一个泛型接口。约束实现他的子类必须有geyByKey(key)和setByKey(key, value) 要求setByKey的时候value的类型和实例化子类的时候指定的类型一致 解决代码重用 库 自定义 内置 import ‘dart:io’ import ‘dart:math’ pub async是让方法变成异步 await是等待异步方法执行完成 从下面网站中找到我们想要的库： https://pub.dev/packages https://pub.flutter-io.cn/packages https://pub.dartlang.org/flutter/ pubspec.lock pub get // 安装依赖 import ‘’ show getAge; // 从库中只引入getAge方法 import ‘’ as xxx; // 起个别名，解决冲突 import ‘’ hide getName; // 隐藏getName","categories":[],"tags":[]},{"title":"Hello World --- Robin LEI","slug":"hello-world","date":"2019-08-24T08:05:11.966Z","updated":"2019-08-24T10:04:16.507Z","comments":true,"path":"2019/08/24/hello-world/","link":"","permalink":"http://yoursite.com/2019/08/24/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}
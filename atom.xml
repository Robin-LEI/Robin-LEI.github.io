<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Robin LEI</title>
  
  <subtitle>用代码改变世界，因为喜欢所以热爱!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-27T12:35:53.965Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Robin LEI</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTML</title>
    <link href="http://yoursite.com/2019/09/27/html/"/>
    <id>http://yoursite.com/2019/09/27/html/</id>
    <published>2019-09-27T12:32:00.000Z</published>
    <updated>2019-09-27T12:35:53.965Z</updated>
    
    <content type="html"><![CDATA[<h3 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h3><ol><li>trident: 1997开始在ie使用</li><li>blink:Google,2013年之前用的是webkit</li><li>webkit:safari</li><li>gecko:Firefox</li><li>presto:opera</li><li>servo:mozilla和三星达成协议,准备开发下一代浏览器内核servo</li></ol><h3 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h3><ol><li><!DCTYPOE html></li><li>主要是为了告诉浏览器采用哪种模式(或规范)解析页面</li><li>web浏览器布局引擎有三种模式:</li></ol><ul><li>怪异模式,quirks mode</li><li>混杂模式,almost standards mode,准标准模式</li><li>标准模式,full standards mode</li></ul><ol start="4"><li>如果不写dtd,浏览器就会按照自己的方式去解析页面,因为不同的浏览器有自己不同的解析方式,所以会导致同一个页面在不同浏览器出现不一致的样式,这称之为quirks mode</li><li>如果写了dtd声明,浏览器就会按照W3C的标准规范去解析页面</li><li>在IE6之前,是不存在dtd模式的,之前的布局都是采用旧的一种布局方式,在IE6之后,出现了dtd模式,此时为了兼容之前的网页,就在顶部加了<!DOCTYPE html>来区分</li></ol><h3 id="src与href"><a href="#src与href" class="headerlink" title="src与href"></a>src与href</h3><ol><li>src会替换当前元素</li><li>href会在当前文档和引用资源之间确立联系</li><li>src串行加载资源,会把指向的资源下载到当前文档内,同时会阻塞当前文档的正常渲染,例如js脚本,image,frame</li><li>href是并行加载</li></ol><h3 id="link与-import"><a href="#link与-import" class="headerlink" title="link与@import"></a>link与@import</h3><ol><li>link没有兼容性,属于xhtml与html标签,不仅可以对css引入,还可以定义rss(聚合内容),还支持使用JavaScript来操作dom控制元素样式</li><li>@import存在兼容性,在CSS2.1后引入,只是单纯的css标签,不支持js操作</li></ol><h3 id="block-formatting-context"><a href="#block-formatting-context" class="headerlink" title="block formatting context"></a>block formatting context</h3><ol><li>可以看作一个沙箱</li><li>不论内部元素如何变动均不会改变外部布局</li><li>根元素body,position:absolute/fixed,float:left/right,display:inline-block/table会触发BFC</li><li>内部盒子会垂直排列,两个盒子的间距由margin决定,但是margin会发生合并,可以设置overflow解决</li></ol><h3 id="html与xhtml"><a href="#html与xhtml" class="headerlink" title="html与xhtml"></a>html与xhtml</h3><ol><li>html对开发者比较宽容,写法上没有xhtml严格</li><li>xhtml不支持标签大写,也不允许大小写混合写</li><li>xhtml标签上只允许使用双引号</li><li>xhtml不支持target=_blank,可以设置rel=”external”配合JavaScript使用</li></ol><h3 id="opacity和rgba"><a href="#opacity和rgba" class="headerlink" title="opacity和rgba()"></a>opacity和rgba()</h3><ol><li>opacity会穿透</li><li>rgba不会</li></ol><h3 id="如何让一个元素水平垂直居中"><a href="#如何让一个元素水平垂直居中" class="headerlink" title="如何让一个元素水平垂直居中"></a>如何让一个元素水平垂直居中</h3><ol><li><p>使用position:relative;position:absolute;transform:translate(-50%)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.outer-box &#123;</span><br><span class="line">width: 600px;</span><br><span class="line">height: 600px;</span><br><span class="line">border: 1px solid red;</span><br><span class="line">position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.inner-box &#123;</span><br><span class="line">width: 300px;</span><br><span class="line">height: 300px;</span><br><span class="line">border: 1px solid blue;</span><br><span class="line">position: absolute;</span><br><span class="line">top: 50%;</span><br><span class="line">left: 50%;</span><br><span class="line">transform: translate(-50%, -50%);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;outer-box&quot;&gt;</span><br><span class="line">&lt;div class=&quot;inner-box&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>使用display:flex;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.outer-box &#123;</span><br><span class="line">width: 600px;</span><br><span class="line">height: 600px;</span><br><span class="line">border: 1px solid red;</span><br><span class="line">display: flex;</span><br><span class="line">justify-content: center;</span><br><span class="line">align-items: center;</span><br><span class="line">&#125;</span><br><span class="line">.inner-box &#123;</span><br><span class="line">width: 300px;</span><br><span class="line">height: 300px;</span><br><span class="line">border: 1px solid blue;</span><br><span class="line">position: absolute;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;outer-box&quot;&gt;</span><br><span class="line">&lt;div class=&quot;inner-box&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>top:0;right:0;bottom:0;left:0;margin:auto;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.outer-box &#123;</span><br><span class="line">width: 600px;</span><br><span class="line">height: 600px;</span><br><span class="line">border: 1px solid red;</span><br><span class="line">position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.inner-box &#123;</span><br><span class="line">width: 300px;</span><br><span class="line">height: 300px;</span><br><span class="line">border: 1px solid blue;</span><br><span class="line">position: absolute;</span><br><span class="line">/* 遮罩,充满整个父级元素大小 */</span><br><span class="line">top: 0;</span><br><span class="line">right: 0;</span><br><span class="line">bottom: 0;</span><br><span class="line">left: 0;</span><br><span class="line">/* 会使得上下,左右平分剩余空间 */</span><br><span class="line">margin: auto;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;outer-box&quot;&gt;</span><br><span class="line">&lt;div class=&quot;inner-box&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>display:table-cell;text-align:center;vertical-align:middle;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.outer-box &#123;</span><br><span class="line">width: 600px;</span><br><span class="line">height: 600px;</span><br><span class="line">border: 1px solid red;</span><br><span class="line">display: table-cell;</span><br><span class="line">text-align: center;</span><br><span class="line">vertical-align: middle;</span><br><span class="line">&#125;</span><br><span class="line">.inner-box &#123;</span><br><span class="line">width: 300px;</span><br><span class="line">height: 300px;</span><br><span class="line">border: 1px solid blue;</span><br><span class="line">display: inline-block;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;outer-box&quot;&gt;</span><br><span class="line">&lt;div class=&quot;inner-box&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="H5C3"><a href="#H5C3" class="headerlink" title="H5C3"></a>H5C3</h3><ol><li>H5新特性:增强型表单控件,语义化标签,拖拽,地理定位,canvas,websocket,webworker,localstorage,音频/视频</li><li>C3新特性:rgba,text-shadow,box-shadow,border-radius,border-image,border-color,transform,transition,animation</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;浏览器内核&quot;&gt;&lt;a href=&quot;#浏览器内核&quot; class=&quot;headerlink&quot; title=&quot;浏览器内核&quot;&gt;&lt;/a&gt;浏览器内核&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;trident: 1997开始在ie使用&lt;/li&gt;
&lt;li&gt;blink:Google,2013年之前用的
      
    
    </summary>
    
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>前端模块化</title>
    <link href="http://yoursite.com/2019/09/25/module/"/>
    <id>http://yoursite.com/2019/09/25/module/</id>
    <published>2019-09-25T14:42:33.000Z</published>
    <updated>2019-09-25T14:58:50.052Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ol><li>最早的就是单纯的写代码(非常容易污染全局环境)</li><li>然后演化到了使用命名空间的形式去简单包装，但是本质上也还是对象，仍然不安全</li><li>然后演化到了使用匿名闭包(IIFE模式)</li><li>在增强到引入依赖</li></ol><h3 id="全局函数模式"><a href="#全局函数模式" class="headerlink" title="全局函数模式"></a>全局函数模式</h3><ol><li>将不同的功能封装在不同的全局函数里</li><li>非常容易覆盖，不管是函数名还是变量</li></ol><h3 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h3><ol><li>仍然可以操作对象，修改数据</li></ol><h3 id="匿名函数自调用"><a href="#匿名函数自调用" class="headerlink" title="匿名函数自调用"></a>匿名函数自调用</h3><ol><li>想让外面拿到数据，就得通过window暴露</li></ol><h3 id="IIFE"><a href="#IIFE" class="headerlink" title="IIFE"></a>IIFE</h3><ol><li>引入依赖</li><li>现代模块实现的基石<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(function(window, $) &#123;</span><br><span class="line">  let name = &apos;test&apos;</span><br><span class="line">  function foo() &#123;</span><br><span class="line">    console.log(name)</span><br><span class="line">  &#125;</span><br><span class="line">  $(&apos;body&apos;).css(&apos;background&apos;: &apos;red&apos;)</span><br><span class="line">&#125;)(window, jQuery)</span><br></pre></td></tr></table></figure></li></ol><h3 id="commonjs"><a href="#commonjs" class="headerlink" title="commonjs"></a>commonjs</h3><ol><li>nodejs就是基于这种</li><li>每一个文件都是一个模块</li><li>模块分为第三方模块和自定义模块</li><li>module.exports和exports.xxx都可以导出，但是本质上导出的是exports</li><li>在浏览器端如果需要使用commonjs需要引入browserify浏览器打包工具</li><li>执行browser js/src/index.js -o js/dist/bundle.js</li></ol><h3 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h3><ol><li>专门用在浏览器端</li><li>异步加载模块</li><li>模块分为无依赖模块和有依赖模块</li><li>需要引入require.js库</li><li>在没有引入AMD概念之前，前端js模块之间的引入十分恶心，对于错综复杂的项目依赖之间容易搞混，会导致页面上引入过多的script标签，而script标签又会导致页面请求次数过多，影响性能</li><li>jquery内置支持AMD</li></ol><h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><ol><li>依赖sea.js库</li><li>借鉴了commonJS和CMD</li><li>可以同步加载模块也可以异步加载模块</li></ol><h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><ol><li><p>export导出</p></li><li><p>import导入</p></li><li><p>在浏览器不支持es6语法的时候，需要引入babel转换工具，需要安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i babel-cli browserify -g</span><br><span class="line">npm i babel-preset-es2015 -S</span><br></pre></td></tr></table></figure></li><li><p>注意babel只能编译文件，不能新建文件夹</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;最早的就是单纯的写代码(非常容易污染全局环境)&lt;/li&gt;
&lt;li&gt;然后演化到了使用命名空间的形式去简单包装，但是本质上也还是对象
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="模块化" scheme="http://yoursite.com/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>mock</title>
    <link href="http://yoursite.com/2019/09/24/mock/"/>
    <id>http://yoursite.com/2019/09/24/mock/</id>
    <published>2019-09-24T13:10:50.000Z</published>
    <updated>2019-09-24T13:11:17.821Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ol><li>快速构建restful api，完成前后端分离开发</li></ol><h3 id="前后端分离开发方案"><a href="#前后端分离开发方案" class="headerlink" title="前后端分离开发方案"></a>前后端分离开发方案</h3><p><strong>mock</strong></p><ul><li>和后端约定好接口的标准</li><li>后端开始开发接口</li><li>前端通过假数据方式模拟一个后端接口</li></ul><h3 id="使用http-server搭建静态资源服务器、live-server"><a href="#使用http-server搭建静态资源服务器、live-server" class="headerlink" title="使用http-server搭建静态资源服务器、live-server"></a>使用http-server搭建静态资源服务器、live-server</h3><h3 id="第三方mock工具"><a href="#第三方mock工具" class="headerlink" title="第三方mock工具"></a>第三方mock工具</h3><ol><li>mock.js(无法持久化数据)</li><li>json-server</li></ol><h3 id="使用mock"><a href="#使用mock" class="headerlink" title="使用mock"></a>使用mock</h3><ol><li><a href="http://mockjs.com" target="_blank" rel="noopener">http://mockjs.com</a></li><li>引入mock.js后，会有一个全局对象Mock</li><li>Mock.mock(‘/users’, ‘get’, {hello: ‘world’})<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">  &lt;title&gt;mock&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script src=&quot;https://cdn.bootcss.com/Mock.js/1.0.1-beta3/mock.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;https://cdn.bootcss.com/jquery/3.4.1/jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    Mock.mock(&apos;/details&apos;, &apos;get&apos;,  Mock.mock(&#123;</span><br><span class="line">        &quot;name|1-10&quot;: &quot;*&quot;,</span><br><span class="line">        &quot;age|1-20&quot;: 1</span><br><span class="line">      &#125;))</span><br><span class="line">    $.get(&apos;/details&apos;, (res) =&gt; &#123;</span><br><span class="line">      console.log(&apos;res&apos;, res)</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="json-server"><a href="#json-server" class="headerlink" title="json-server"></a>json-server</h3><ol><li><a href="https://github.com/typicode/json-server" target="_blank" rel="noopener">GitHub</a></li><li>json文件中每一个名字都是一个资源</li></ol><h3 id="restful"><a href="#restful" class="headerlink" title="restful"></a>restful</h3><ol><li>面向资源编程</li><li>资源指的就是一类数据</li><li>最重要的是如何去表示一个资源(地址即资源)</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;快速构建restful api，完成前后端分离开发&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;前后端分离开发方案&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
      <category term="mock" scheme="http://yoursite.com/tags/mock/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react-hooks</title>
    <link href="http://yoursite.com/2019/09/22/react-hooks/"/>
    <id>http://yoursite.com/2019/09/22/react-hooks/</id>
    <published>2019-09-22T13:39:19.000Z</published>
    <updated>2019-09-22T13:39:48.893Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ol><li>用函数替代了类</li><li>方法即组件</li></ol><h3 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h3><ol><li>不能存在于if语句中</li><li>react自带的一个hook函数，用来声明状态变量</li><li>const [count, setCount] = useState(0)</li><li>该函数接受的参数是状态的初始值，返回一个数组，数组的第0位是当前的初始值，第1位是改变状态值的方法函数</li></ol><h3 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h3><ol><li>等于componentDidMount和componentDidUpdate</li><li>在组件挂载和更新时触发</li></ol><h3 id="组件销毁"><a href="#组件销毁" class="headerlink" title="组件销毁"></a>组件销毁</h3><ol><li>componentWillUnmount</li><li>使用useEffect，当组件销毁时执行<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function Index() &#123;</span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    console.log(&apos;组件挂载时执行&apos;)</span><br><span class="line">    return () =&gt; &#123;</span><br><span class="line">      console.log(&apos;组件卸载时执行&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  return (&lt;h1&gt;这是Index页面&lt;h1&gt;)</span><br><span class="line">&#125;</span><br><span class="line">// 但是当我们每次改变数据时，会打印console.log(&apos;组件挂载时执行&apos;)，解决办法如下：</span><br><span class="line">// 需要借助于useEffect的返回函数的第二个参数，第二个参数可以写入很多状态对应的变量，意思是当状态值发生改变时才进行解绑，但是我们如何传入一个[]作为第二个参数时，就是当组件将被销毁时才进行解绑</span><br><span class="line">function Index() &#123;</span><br><span class="line">  useEffect(()=&gt;&#123;</span><br><span class="line">      console.log(&apos;组件挂载时执行&apos;)</span><br><span class="line">      return ()=&gt;&#123;</span><br><span class="line">          console.log(&apos;组件卸载时执行&apos;)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,[])</span><br><span class="line">  return (&lt;h1&gt;这是Index页面&lt;h1&gt;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h3><ol><li>解决父子组件传值</li><li>可以实现跨层级的组件传值问题</li><li>可以访问全局状态，避免数据一层层的传递，和redux类似(状态的全局化，并且可以统一管理)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123;createContext,useContext,useState&#125; from &apos;react&apos;</span><br><span class="line"></span><br><span class="line">const CountContext = createContext()</span><br><span class="line"></span><br><span class="line">// 子组件</span><br><span class="line">function Children() &#123;</span><br><span class="line">  let count = useContext(CountContext)</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;h1&gt;这是子组件&lt;/h1&gt;</span><br><span class="line">      &lt;h3&gt;&#123;count&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Parent() &#123;</span><br><span class="line">  const [count, setCount] = useState(0)</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;h1&gt;这是parent组件&lt;/h1&gt;</span><br><span class="line">      &lt;h2&gt;次数:&#123;count&#125;&lt;/h2&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; &#123;setCount(count+1)&#125;&#125;&gt;点击使得次数增加&lt;/button&gt;</span><br><span class="line">      &lt;CountContext.Provider value=&#123;count&#125;&gt;</span><br><span class="line">        &lt;Children /&gt;</span><br><span class="line">      &lt;/CountContext.Provider&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Parent</span><br></pre></td></tr></table></figure></li></ol><h3 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h3><ol><li>通过action的传递，更新复杂逻辑的状态</li><li>控制业务逻辑<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123;useReducer&#125; from &apos;react&apos;</span><br><span class="line"></span><br><span class="line">function UseReducer() &#123;</span><br><span class="line">  const [count, dispatch] = useReducer((state, action) =&gt; &#123;</span><br><span class="line">    switch(action) &#123;</span><br><span class="line">      case &apos;add&apos;:</span><br><span class="line">        return state + 1</span><br><span class="line">        break</span><br><span class="line">      case &apos;minus&apos;:</span><br><span class="line">        return state - 1</span><br><span class="line">        break</span><br><span class="line">      default:</span><br><span class="line">        return state</span><br><span class="line">        break</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, 0)</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;h1&gt;这是第几次&#123;count&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; &#123;dispatch(&apos;add&apos;)&#125;&#125;&gt;add&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; &#123;dispatch(&apos;minus&apos;)&#125;&#125;&gt;minus&lt;/button&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default UseReducer</span><br></pre></td></tr></table></figure></li></ol><h3 id="useMemo解决子组件重复执行的问题"><a href="#useMemo解决子组件重复执行的问题" class="headerlink" title="useMemo解决子组件重复执行的问题"></a>useMemo解决子组件重复执行的问题</h3><ol><li>常常用于缓存变量<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">import React, &#123; useState &#125; from &apos;react&apos;;</span><br><span class="line">import UseMemoChild from &apos;./useMemoChild&apos;</span><br><span class="line"></span><br><span class="line">function UseMemo() &#123;</span><br><span class="line">  const [A, setA] = useState(&apos;这是A&apos;)</span><br><span class="line">  const [B, setB] = useState(&apos;这是B&apos;)</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;h1&gt;这是父组件&lt;/h1&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; &#123;setA(new Date().getTime()+&apos;点击了A&apos;)&#125;&#125;&gt;点击A&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; &#123;setB(new Date().valueOf()+&apos;点击了B&apos;)&#125;&#125;&gt;点击B&lt;/button&gt;</span><br><span class="line">      &lt;UseMemoChild isA=&#123;A&#125; &gt;&#123;B&#125;&lt;/UseMemoChild&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default UseMemo</span><br><span class="line"></span><br><span class="line">// 子组件</span><br><span class="line">import React, &#123;useMemo&#125; from &apos;react&apos;;</span><br><span class="line"></span><br><span class="line">function UseMemoChild(&#123;isA, children&#125;) &#123;</span><br><span class="line">  function handleAMethods(isA) &#123;</span><br><span class="line">    console.log(`执行了A的处理方法:$&#123;isA&#125;`)</span><br><span class="line">    return `执行了A的处理方法:$&#123;isA&#125;`</span><br><span class="line">  &#125;</span><br><span class="line">  // 优化前</span><br><span class="line">  // const handleA = handleAMethods(isA)</span><br><span class="line"></span><br><span class="line">  // 优化后</span><br><span class="line">  const handleA = useMemo(() =&gt; &#123;</span><br><span class="line">    return handleAMethods(isA)</span><br><span class="line">  &#125;, [isA])</span><br><span class="line">  </span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;h2&gt;这是子组件页面&lt;/h2&gt;</span><br><span class="line">      &lt;h3&gt;接收到父组件数据A：&#123;handleA&#125;&lt;/h3&gt;</span><br><span class="line">      &lt;h3&gt;接收到父组件数据B：&#123;children&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default UseMemoChild</span><br></pre></td></tr></table></figure></li></ol><h3 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h3><ol><li>获取dom元素</li><li>一般不推荐此操作</li></ol><h3 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h3><ol><li>缓存方法</li><li>提升性能，避免不必要的问题出现</li></ol><h3 id="优化react-hooks程序性能"><a href="#优化react-hooks程序性能" class="headerlink" title="优化react hooks程序性能"></a>优化react hooks程序性能</h3><ol><li>使用function的形式编写组件，使得我们丢了shouldComponentUpdate这个生命周期函数</li><li>也就是我们没有办法在组件更新之前去控制这个组件是不是要重新渲染</li><li>在函数组件中，也没有了mount和update两个状态，这意味着函数组件的每一次执行都会执行内部的所有逻辑，就带来了非常大的性能损耗</li><li>使用useMemo和useCallback就可以解决这个性能问题</li></ol><h3 id="自定义hooks函数"><a href="#自定义hooks函数" class="headerlink" title="自定义hooks函数"></a>自定义hooks函数</h3><ol><li>自定义的hooks函数偏向于功能</li><li>组件偏向于界面和业务逻辑的实现</li><li>往往使用use开头命名，这样才能更好的区分组件和自定义hooks函数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123;useState, useEffect, useCallback&#125; from &apos;react&apos;;</span><br><span class="line">function useWinSize() &#123;</span><br><span class="line">  const [size, setSize] = useState(&#123;</span><br><span class="line">    width: document.documentElement.clientWidth,</span><br><span class="line">    height: document.documentElement.clientHeight</span><br><span class="line">  &#125;)</span><br><span class="line">  const onResize = useCallback(() =&gt; &#123;</span><br><span class="line">    setSize(&#123;</span><br><span class="line">      width: document.documentElement.clientWidth,</span><br><span class="line">      height: document.documentElement.clientHeight</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    window.addEventListener(&apos;resize&apos;, onResize)</span><br><span class="line">    return () =&gt; &#123;</span><br><span class="line">      window.removeEventListener(&apos;resize&apos;, onResize)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [])</span><br><span class="line">  return size</span><br><span class="line">&#125;</span><br><span class="line">function Hooks() &#123;</span><br><span class="line">  const size = useWinSize()</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;h1&gt;当前的浏览器的尺寸大小是: &#123;size.width&#125; x &#123;size.height&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">export default Hooks</span><br></pre></td></tr></table></figure></li></ol><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">// index.js</span><br><span class="line">import React from &apos;react&apos;</span><br><span class="line">import Info from &apos;./info&apos;</span><br><span class="line">import Buttons from &apos;./buttons&apos;</span><br><span class="line">import &#123;Color&#125; from &apos;./color&apos;</span><br><span class="line">function Home() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;Color&gt;</span><br><span class="line">        &lt;Info&gt;&lt;/Info&gt;</span><br><span class="line">        &lt;Buttons&gt;&lt;/Buttons&gt;</span><br><span class="line">      &lt;/Color&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">export default Home</span><br><span class="line"></span><br><span class="line">// info.js</span><br><span class="line">import React, &#123;useContext&#125; from &apos;react&apos;</span><br><span class="line">import &#123;ColorContext&#125; from &apos;./color&apos;</span><br><span class="line">function Info() &#123;</span><br><span class="line">  const &#123;color&#125; = useContext(ColorContext)</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;h1 style=&#123;&#123;color&#125;&#125;&gt;当前的颜色是&#123;color&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">export default Info</span><br><span class="line"></span><br><span class="line">// buttons.js</span><br><span class="line">import React, &#123;useContext&#125; from &apos;react&apos;</span><br><span class="line">import &#123;UPDATE_COLOR, ColorContext&#125; from &apos;./color&apos;</span><br><span class="line">function Buttons() &#123;</span><br><span class="line">  // dispatch是在共享状态里面的</span><br><span class="line">  const &#123;dispatch&#125; = useContext(ColorContext)</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; &#123;dispatch(&#123;type: UPDATE_COLOR, color: &apos;red&apos;&#125;)&#125;&#125;&gt;点击变为红色&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; &#123;dispatch(&#123;type: UPDATE_COLOR, color: &apos;blue&apos;&#125;)&#125;&#125;&gt;点击变为蓝色&lt;/button&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">export default Buttons</span><br><span class="line"></span><br><span class="line">// data.js</span><br><span class="line">import React, &#123;createContext, useReducer&#125; from &apos;react&apos;</span><br><span class="line">// 数据共享</span><br><span class="line">export const ColorContext = createContext(&#123;&#125;)</span><br><span class="line">export const UPDATE_COLOR = &apos;update_color&apos;</span><br><span class="line">function reducer(state, action) &#123;</span><br><span class="line">  switch(action.type) &#123;</span><br><span class="line">    case UPDATE_COLOR:</span><br><span class="line">      return action.color</span><br><span class="line">    default:</span><br><span class="line">      return state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">export const Color = (props) =&gt; &#123;</span><br><span class="line">  const [color, dispatch] = useReducer(reducer, &apos;blue&apos;)</span><br><span class="line">  return (</span><br><span class="line">    &lt;ColorContext.Provider value=&#123;&#123;color, dispatch&#125;&#125;&gt;</span><br><span class="line">    &#123;/* 保证内部所有的组件都可以使用传递的值 */&#125;</span><br><span class="line">      &#123;props.children&#125;</span><br><span class="line">    &lt;/ColorContext.Provider&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;用函数替代了类&lt;/li&gt;
&lt;li&gt;方法即组件&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;useState&quot;&gt;&lt;a href=&quot;#us
      
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="react-hooks" scheme="http://yoursite.com/tags/react-hooks/"/>
    
  </entry>
  
  <entry>
    <title>react-next</title>
    <link href="http://yoursite.com/2019/09/21/react-next/"/>
    <id>http://yoursite.com/2019/09/21/react-next/</id>
    <published>2019-09-21T01:25:45.000Z</published>
    <updated>2019-09-21T01:27:32.138Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SPA"><a href="#SPA" class="headerlink" title="SPA"></a>SPA</h3><ol><li>单一页面ian，首屏加载过慢</li><li>不能seo(对seo不友好)</li></ol><h3 id="next-js"><a href="#next-js" class="headerlink" title="next.js"></a>next.js</h3><ol><li>SSR</li><li>服务端渲染</li><li>自带数据同步</li><li>带有丰富的插件(自己形成了生态)</li><li>配置灵活</li></ol><h3 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h3><p><strong>方式一</strong></p><ol><li>create-next-app</li><li>npx create-next-app demo</li></ol><p><strong>方式二</strong></p><ol><li>yarn add react react-dom next</li><li>脚本命令配置:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;dev&quot;: &quot;next&quot;,</span><br><span class="line">&quot;build&quot;: &quot;next build&quot;,</span><br><span class="line">&quot;start&quot;: &quot;next start&quot;</span><br></pre></td></tr></table></figure></li></ol><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><ol><li>会根据在pages下面写的路径来自动生成路由</li><li>Link标签控制跳转</li><li>Router.push 编程式跳转</li></ol><h3 id="使用query传递参数以及参数的接收"><a href="#使用query传递参数以及参数的接收" class="headerlink" title="使用query传递参数以及参数的接收"></a>使用query传递参数以及参数的接收</h3><ol><li>import {withRouter} from ‘next/router’</li><li>router.query.arg</li></ol><h3 id="路由的钩子事件"><a href="#路由的钩子事件" class="headerlink" title="路由的钩子事件"></a>路由的钩子事件</h3><ol><li>绑定事件：Router.events.on(‘routeChangeStart’, (…arg) =&gt; {<br>console.log(..arg)<br>})</li><li>routeChangeStart</li><li>routeChangeComplete</li><li>beforeHistoryChange</li><li>routeChangeError</li><li>hashChangeStart</li><li>hashChangeComplete</li></ol><h3 id="使用axios获取数据"><a href="#使用axios获取数据" class="headerlink" title="使用axios获取数据"></a>使用axios获取数据</h3><ol><li>只能在getInitialProps里面进行数据请求、</li><li>使用easy-mock模拟数据<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import Link from &apos;next/link&apos;</span><br><span class="line">import &#123;withRouter&#125; from &apos;next/router&apos;</span><br><span class="line">import axios from &apos;axios&apos;</span><br><span class="line">const Test = (&#123;router, list&#125;) =&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;h1&gt;这是test页面&lt;/h1&gt;</span><br><span class="line">      &lt;h2&gt;&#123;router.query.name&#125;&lt;/h2&gt;</span><br><span class="line">      &lt;h3&gt;&#123;list&#125;&lt;/h3&gt;</span><br><span class="line">      &lt;Link href=&apos;/index&apos;&gt;</span><br><span class="line">        &lt;a&gt;回到首页&lt;/a&gt;</span><br><span class="line">      &lt;/Link&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">Test.getInitialProps = async () =&gt; &#123;</span><br><span class="line">  const promise = new Promise(resolve =&gt; &#123;</span><br><span class="line">    axios(&apos;https://www.easy-mock.com/mock/5cfcce489dc7c36bd6da2c99/xiaojiejie/getList&apos;).then(res =&gt; &#123;</span><br><span class="line">      console.log(res)</span><br><span class="line">      resolve(res.data.data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  return await promise</span><br><span class="line">&#125;</span><br><span class="line">export default withRouter(Test)</span><br></pre></td></tr></table></figure></li></ol><h3 id="如何编写样式"><a href="#如何编写样式" class="headerlink" title="如何编写样式"></a>如何编写样式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import &#123;useState&#125; from &apos;react&apos;</span><br><span class="line">function TestColor() &#123;</span><br><span class="line">  const [color, setColor] = useState(&apos;blue&apos;)</span><br><span class="line">  const changeColor = () =&gt; &#123;</span><br><span class="line">    setColor(color == &apos;blue&apos; ? &apos;red&apos; : &apos;blue&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;div className=&apos;blue&apos; onClick=&#123;changeColor&#125;&gt;这是蓝色&lt;/div&gt;</span><br><span class="line">      &lt;style jsx&gt;</span><br><span class="line">        &#123;</span><br><span class="line">          `</span><br><span class="line">            .blue &#123;</span><br><span class="line">              color: $&#123;color&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">          `</span><br><span class="line">        &#125;</span><br><span class="line">      &lt;/style&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">export default TestColor</span><br></pre></td></tr></table></figure><h3 id="模块懒加载"><a href="#模块懒加载" class="headerlink" title="模块懒加载"></a>模块懒加载</h3><p>一. 外部模块懒加载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const changeTime = async () =&gt; &#123;</span><br><span class="line">  const moment = await import(&apos;moment&apos;)</span><br><span class="line">  setTime(moment.default(Date.now()).format())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二. 自定义组件懒加载</p><ol><li>import dynamic from ‘next/dynamic’</li><li>const Com = dynamic(import(‘./components/com’))</li></ol><h3 id="利于SEO"><a href="#利于SEO" class="headerlink" title="利于SEO"></a>利于SEO</h3><ol><li>import Head from ‘next/head’</li><li><head><meta name="generator" content="Hexo 3.9.0"><title></title><meta></head></li></ol><h3 id="next中引入css"><a href="#next中引入css" class="headerlink" title="next中引入css"></a>next中引入css</h3><ol><li>yarn add @zeit/next-css</li><li>新建next.config.js<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const withCss = require(&apos;@zeit/next-css&apos;)</span><br><span class="line">if(typeof require !== &apos;undefined&apos;) &#123;</span><br><span class="line">  require.extensions[&apos;.css&apos;] = file =&gt; &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">module.exports = withCss(&#123;&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="next使用antd"><a href="#next使用antd" class="headerlink" title="next使用antd"></a>next使用antd</h3><ol><li><p>yarn add antd</p></li><li><p>yarn add babel-plugin-import 按需加载</p></li><li><p>安装完成后，在项目根目录建立.babelrc文件，然后写入如下配置文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;presets&quot;:[&quot;next/babel&quot;],  //Next.js的总配置文件，相当于继承了它本身的所有配置</span><br><span class="line">    &quot;plugins&quot;:[     //增加新的插件，这个插件就是让antd可以按需引入，包括CSS</span><br><span class="line">        [</span><br><span class="line">            &quot;import&quot;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;libraryName&quot;:&quot;antd&quot;,</span><br><span class="line">                &quot;style&quot;:&quot;css&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这样配置好了以后，webpack就不会默认把整个Ant Design的包都进行打包到生产环境了，而是我们使用那个组件就打包那个组件,同样CSS也是按需打包的。</p></li></ol><h3 id="next打包"><a href="#next打包" class="headerlink" title="next打包"></a>next打包</h3><ol><li>其实Next.js大打包时非常简单的，只要一个命令就可以打包成功。但是当你使用了Ant Desgin后，在打包的时候会遇到一些坑。</li><li>在page目录下，新建一个_app.js文件，然后写入下面的代码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import App from &apos;next/app&apos;</span><br><span class="line">import &apos;antd/dist/antd.css&apos;</span><br><span class="line">export default App</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;SPA&quot;&gt;&lt;a href=&quot;#SPA&quot; class=&quot;headerlink&quot; title=&quot;SPA&quot;&gt;&lt;/a&gt;SPA&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;单一页面ian，首屏加载过慢&lt;/li&gt;
&lt;li&gt;不能seo(对seo不友好)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;ne
      
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="react-next" scheme="http://yoursite.com/tags/react-next/"/>
    
  </entry>
  
  <entry>
    <title>fabric</title>
    <link href="http://yoursite.com/2019/09/18/fabric/"/>
    <id>http://yoursite.com/2019/09/18/fabric/</id>
    <published>2019-09-18T14:23:35.000Z</published>
    <updated>2019-09-18T14:29:15.862Z</updated>
    
    <content type="html"><![CDATA[<h3 id="初始fabric"><a href="#初始fabric" class="headerlink" title="初始fabric"></a>初始fabric</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;canvas id=&quot;can&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">  &lt;script src=&quot;https://cdn.bootcss.com/fabric.js/3.4.0/fabric.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var canvas = new fabric.Canvas(&apos;can&apos;)</span><br><span class="line">    var rect = new fabric.Rect(&#123;</span><br><span class="line">      left: 100,</span><br><span class="line">      top: 100,</span><br><span class="line">      fill: &apos;red&apos;,</span><br><span class="line">      width: 100,</span><br><span class="line">      height: 80</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    canvas.add(rect)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="画不规则图形"><a href="#画不规则图形" class="headerlink" title="画不规则图形"></a>画不规则图形</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;canvas id=&quot;canvas&quot; width=&quot;800&quot; height=&quot;800&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">  &lt;script src=&quot;./fabric/fabric.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var canvas = new fabric.Canvas(&apos;canvas&apos;)</span><br><span class="line"></span><br><span class="line">    var path = new fabric.Path(&apos;M 0 0 L 200 100 L 170 200 z&apos;)</span><br><span class="line"></span><br><span class="line">    path.set(&#123;</span><br><span class="line">      left: 200,</span><br><span class="line">      top: 300,</span><br><span class="line">      fill: &apos;blue&apos;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    canvas.add(path)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="画圆"><a href="#画圆" class="headerlink" title="画圆"></a>画圆</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;canvas id=&quot;canvas&quot; width=&quot;800&quot; height=&quot;800&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">  &lt;script src=&quot;./fabric/fabric.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var canvas = new fabric.Canvas(&apos;canvas&apos;)</span><br><span class="line"></span><br><span class="line">    var circle = new fabric.Circle(&#123;</span><br><span class="line">      left: 100,</span><br><span class="line">      top: 100,</span><br><span class="line">      radius: 50,</span><br><span class="line">      strokWidth: 1,</span><br><span class="line">      stroke: &apos;red&apos;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    canvas.add(circle)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="渐变圆"><a href="#渐变圆" class="headerlink" title="渐变圆"></a>渐变圆</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;canvas id=&quot;canvas&quot; width=&quot;800&quot; height=&quot;800&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">  &lt;script src=&quot;./fabric/fabric.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var canvas = new fabric.Canvas(&apos;canvas&apos;)</span><br><span class="line"></span><br><span class="line">    var circle = new fabric.Circle(&#123;</span><br><span class="line">      left: 100,</span><br><span class="line">      top: 100,</span><br><span class="line">      radius: 50,</span><br><span class="line">      strokWidth: 1,</span><br><span class="line">      stroke: &apos;red&apos;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // 从上到下渐变</span><br><span class="line">    // circle.setGradient(&apos;fill&apos;, &#123;</span><br><span class="line">    //   x1: 0,</span><br><span class="line">    //   y1: 0,</span><br><span class="line">    //   x2: 0,</span><br><span class="line">    //   y2: circle.height,</span><br><span class="line">    //   colorStops: &#123;</span><br><span class="line">    //     0: &apos;#f00&apos;,</span><br><span class="line">    //     1: &apos;#ccc&apos;</span><br><span class="line">    //   &#125;</span><br><span class="line">    // &#125;)</span><br><span class="line"></span><br><span class="line">    // 从左到右渐变</span><br><span class="line">    circle.setGradient(&apos;fill&apos;, &#123;</span><br><span class="line">      x1: 0,</span><br><span class="line">      y1: 0,</span><br><span class="line">      x2: circle.width,</span><br><span class="line">      y2: 0,</span><br><span class="line">      colorStops: &#123;</span><br><span class="line">        0: &apos;#00f&apos;,</span><br><span class="line">        1: &apos;#0f0&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    canvas.add(circle)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="让图形动起来"><a href="#让图形动起来" class="headerlink" title="让图形动起来"></a>让图形动起来</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;canvas id=&quot;canvas&quot; width=&quot;800&quot; height=&quot;800&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">  &lt;script src=&quot;./fabric/fabric.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var canvas = new fabric.Canvas(&apos;canvas&apos;)</span><br><span class="line"></span><br><span class="line">    var rect = new fabric.Rect(&#123;</span><br><span class="line">      top: 100,</span><br><span class="line">      left: 200,</span><br><span class="line">      width: 200,</span><br><span class="line">      height: 80,</span><br><span class="line">      fill: &apos;red&apos;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    rect.animate(&apos;left&apos;, 500, &#123;</span><br><span class="line">      onChange: canvas.renderAll.bind(canvas),</span><br><span class="line">      duration: 2000,</span><br><span class="line">      easing: fabric.util.ease.easeOutBounce</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    canvas.add(rect)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;canvas id=&quot;canvas&quot; width=&quot;800&quot; height=&quot;800&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">  &lt;script src=&quot;./fabric/fabric.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var canvas = new fabric.Canvas(&apos;canvas&apos;)</span><br><span class="line"></span><br><span class="line">    // mouse: down ,move, up, after:render 画布重新渲染执行， selected</span><br><span class="line"></span><br><span class="line">    var rect = new fabric.Rect(&#123;</span><br><span class="line">      left: 100,</span><br><span class="line">      top: 100,</span><br><span class="line">      width: 100,</span><br><span class="line">      height: 200,</span><br><span class="line">      fill: &apos;red&apos;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    rect.on(&apos;selected&apos;, function(options) &#123;</span><br><span class="line">      console.log(&apos;选择了圆形&apos;, options)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    canvas.add(rect)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="图像过滤器"><a href="#图像过滤器" class="headerlink" title="图像过滤器"></a>图像过滤器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;canvas id=&quot;canvas&quot; width=&quot;800&quot; height=&quot;800&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">  &lt;script src=&quot;./fabric/fabric.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var canvas = new fabric.Canvas(&apos;canvas&apos;)</span><br><span class="line"></span><br><span class="line">    fabric.Image.fromURL(&apos;./lion.jpg&apos;, function(img) &#123;</span><br><span class="line">      var filter = new fabric.Image.filters.Brightness(&#123;</span><br><span class="line">        brightness: 0.1</span><br><span class="line">      &#125;);</span><br><span class="line">      var sepia = new fabric.Image.filters.Sepia()</span><br><span class="line">      // 增加过滤器效果</span><br><span class="line">      img.filters.push(</span><br><span class="line">        filter,</span><br><span class="line">        sepia</span><br><span class="line">      )</span><br><span class="line">      // new fabric.Image.filters.Brightness(&#123;brightness: 10&#125;)</span><br><span class="line">      // 应用过滤器 canvas.renderAll.bind(canvas)</span><br><span class="line">      img.applyFilters()</span><br><span class="line"></span><br><span class="line">      canvas.add(img)</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="文本编辑"><a href="#文本编辑" class="headerlink" title="文本编辑"></a>文本编辑</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;canvas id=&quot;canvas&quot; width=&quot;800&quot; height=&quot;800&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">  &lt;script src=&quot;./fabric/fabric.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var canvas = new fabric.Canvas(&apos;canvas&apos;)</span><br><span class="line"></span><br><span class="line">    var text = new fabric.Text(&apos;hello world, 2019-09-18&apos;, &#123;</span><br><span class="line">      left: 100,</span><br><span class="line">      top: 100,</span><br><span class="line">      fontFamily: &apos;Comic Sans&apos;,</span><br><span class="line">      fontSize: 20</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    canvas.add(text)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="颜色转换"><a href="#颜色转换" class="headerlink" title="颜色转换"></a>颜色转换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;canvas id=&quot;canvas&quot; width=&quot;800&quot; height=&quot;800&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">  &lt;script src=&quot;./fabric/fabric.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var canvas = new fabric.Canvas(&apos;canvas&apos;)</span><br><span class="line"></span><br><span class="line">    var color1 = new fabric.Color(&apos;#f00&apos;)</span><br><span class="line"></span><br><span class="line">    var color2 = new fabric.Color(&apos;#ccc&apos;)</span><br><span class="line"></span><br><span class="line">    var color3 = new fabric.Color(&apos;rgb(123,123,123)&apos;)</span><br><span class="line"></span><br><span class="line">    var color4 = new fabric.Color(&apos;#999&apos;)</span><br><span class="line"></span><br><span class="line">    console.log(color1.toRgb()) // 转成rgb</span><br><span class="line"></span><br><span class="line">    console.log(color3.toHex()) // 转成16进制</span><br><span class="line"></span><br><span class="line">    var color5 = color2.overlayWith(color4).toHex()</span><br><span class="line"></span><br><span class="line">    console.log(color5)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="正方形、圆形、三角形"><a href="#正方形、圆形、三角形" class="headerlink" title="正方形、圆形、三角形"></a>正方形、圆形、三角形</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">      background-color: #ccc;</span><br><span class="line">    &#125;</span><br><span class="line">    #can &#123;</span><br><span class="line">      background-color: #fff;</span><br><span class="line">      border: 1px solid red;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;canvas width=&quot;800&quot; height=&quot;800&quot; id=&quot;can&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">  &lt;script src=&quot;./fabric/fabric.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var canvas = new fabric.Canvas(&apos;can&apos;)</span><br><span class="line"></span><br><span class="line">    var rect = new fabric.Rect(&#123;</span><br><span class="line">      left: 100,</span><br><span class="line">      top: 100,</span><br><span class="line">      fill: &apos;pink&apos;,</span><br><span class="line">      width: 100,</span><br><span class="line">      height: 100</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    var circle = new fabric.Circle(&#123;</span><br><span class="line">      radius: 60,</span><br><span class="line">      left: 200,</span><br><span class="line">      top: 200,</span><br><span class="line">      fill: &apos;blue&apos;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    var triangle = new fabric.Triangle(&#123;</span><br><span class="line">      left: 300,</span><br><span class="line">      top: 300,</span><br><span class="line">      fill: &apos;purple&apos;,</span><br><span class="line">      width: 100,</span><br><span class="line">      height: 150</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    canvas.add(rect)</span><br><span class="line"></span><br><span class="line">    canvas.add(circle)</span><br><span class="line"></span><br><span class="line">    canvas.add(triangle)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="canvas插入图片-上"><a href="#canvas插入图片-上" class="headerlink" title="canvas插入图片-上"></a>canvas插入图片-上</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">      background-color: #ccc;</span><br><span class="line">    &#125;</span><br><span class="line">    #canvas &#123;</span><br><span class="line">      background-color: #fff;</span><br><span class="line">      border: 1px solid red;</span><br><span class="line">    &#125;</span><br><span class="line">    #code &#123;</span><br><span class="line">      display: none;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;canvas id=&quot;canvas&quot; width=&quot;800&quot; height=&quot;800&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">  &lt;img src=&quot;./code.jpg&quot; id=&quot;code&quot; alt=&quot;&quot;&gt;</span><br><span class="line">  &lt;script src=&quot;./fabric/fabric.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var canvas = new fabric.Canvas(&apos;canvas&apos;)</span><br><span class="line">    var code = document.getElementById(&apos;code&apos;)</span><br><span class="line"></span><br><span class="line">    var img = new fabric.Image(code, &#123;</span><br><span class="line">      left: 100,</span><br><span class="line">      top: 200,</span><br><span class="line">      width: 100,</span><br><span class="line">      height: 100</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    canvas.add(img)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="canvas插入图片-下"><a href="#canvas插入图片-下" class="headerlink" title="canvas插入图片-下"></a>canvas插入图片-下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">      background-color: #ccc;</span><br><span class="line">    &#125;</span><br><span class="line">    #canvas &#123;</span><br><span class="line">      background-color: #fff;</span><br><span class="line">      border: 1px solid red;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;canvas id=&quot;canvas&quot; width=&quot;800&quot; height=&quot;800&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">  &lt;script src=&quot;./fabric/fabric.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var canvas = new fabric.Canvas(&apos;canvas&apos;)</span><br><span class="line"></span><br><span class="line">    fabric.Image.fromURL(&apos;./code.jpg&apos;, function(oimg) &#123;</span><br><span class="line">        oimg.scale(0.6)</span><br><span class="line">        oimg.left = 100</span><br><span class="line">        oimg.top = 200</span><br><span class="line">        canvas.add(oimg)</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;初始fabric&quot;&gt;&lt;a href=&quot;#初始fabric&quot; class=&quot;headerlink&quot; title=&quot;初始fabric&quot;&gt;&lt;/a&gt;初始fabric&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
    
      <category term="canvas" scheme="http://yoursite.com/tags/canvas/"/>
    
      <category term="fabric" scheme="http://yoursite.com/tags/fabric/"/>
    
  </entry>
  
  <entry>
    <title>nuxt</title>
    <link href="http://yoursite.com/2019/09/13/nuxt/"/>
    <id>http://yoursite.com/2019/09/13/nuxt/</id>
    <published>2019-09-13T02:04:25.000Z</published>
    <updated>2019-09-13T05:19:01.052Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ol><li>一个通用的vue框架</li><li>常用来做ssr</li><li>ssr：在服务器端把vue的文件直接渲染为html返回给浏览器</li><li>对seo支持的非常好，比spa打开速度快一点</li><li>spa对seo是不友好的</li><li>新闻、博客、电影(需要搜索引擎提供流量的这种站点)这种网站必须要用ssr</li></ol><h3 id="什么是服务端渲染"><a href="#什么是服务端渲染" class="headerlink" title="什么是服务端渲染?"></a>什么是服务端渲染?</h3><p><em>后端先读取数据库，拿到数据，将数据和页面进行拼装成html文件，最后将完整的html页面返回给浏览器</em></p><h3 id="什么是客户端渲染"><a href="#什么是客户端渲染" class="headerlink" title="什么是客户端渲染?"></a>什么是客户端渲染?</h3><p><em>数据由浏览器通过ajax向后台拿到数据，通过js将数据填充到dom元素上最终展示到网页中</em></p><h3 id="前后端渲染对比"><a href="#前后端渲染对比" class="headerlink" title="前后端渲染对比"></a>前后端渲染对比</h3><ol><li>服务端渲染会消耗更多的服务端资源(CPU、内存)</li><li>客户端渲染可以将静态资源部署到cdn上，实现高并发</li><li>服务端渲染对seo更好(因为seo不能分析js文件，只能分析html结构的文件)</li></ol><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><ol><li>npx create-nuxt-app projectName</li><li>npm run dev 开启项目</li></ol><h3 id="目录结构和配置文件"><a href="#目录结构和配置文件" class="headerlink" title="目录结构和配置文件"></a>目录结构和配置文件</h3><h3 id="基本标签"><a href="#基本标签" class="headerlink" title="基本标签"></a>基本标签</h3><ol><li>nuxt-link</li><li>_是动态路由的标志</li></ol><h3 id="默认模板"><a href="#默认模板" class="headerlink" title="默认模板"></a>默认模板</h3><ol><li>app.html</li><li>这样在每一个页面上都会引入app.html的内容</li></ol><h3 id="默认布局"><a href="#默认布局" class="headerlink" title="默认布局"></a>默认布局</h3><h3 id="异步请求"><a href="#异步请求" class="headerlink" title="异步请求"></a>异步请求</h3><ol><li>asyncData</li><li>asyncData() {<br>return axios.get(url).then(res =&gt; {info: res.data}) // 自动把info写入到data中<br>}</li><li>async asyncData() {<br>let {data} = await axios get(url)<br>return {info: data}<br>}</li></ol><h3 id="静态资源文件引用和打包生产"><a href="#静态资源文件引用和打包生产" class="headerlink" title="静态资源文件引用和打包生产"></a>静态资源文件引用和打包生产</h3><ol><li>~</li><li>npm run generate // 打包</li><li>安装npm i -g live-server</li><li>输入live-server启动</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;一个通用的vue框架&lt;/li&gt;
&lt;li&gt;常用来做ssr&lt;/li&gt;
&lt;li&gt;ssr：在服务器端把vue的文件直接渲染为html返回
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="nuxt" scheme="http://yoursite.com/tags/nuxt/"/>
    
  </entry>
  
  <entry>
    <title>web安全</title>
    <link href="http://yoursite.com/2019/09/03/web%E5%AE%89%E5%85%A8/"/>
    <id>http://yoursite.com/2019/09/03/web安全/</id>
    <published>2019-09-03T13:51:12.000Z</published>
    <updated>2019-09-03T15:55:38.836Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常见web攻击方式"><a href="#常见web攻击方式" class="headerlink" title="常见web攻击方式"></a>常见web攻击方式</h3><ol><li>XSS-反射型</li></ol><ul><li>跨站脚本攻击</li><li>反射型xss(恶意的url)，一次性的，由用户发起</li><li>chrome内置了一些xss过滤器，可以防止大部分反射型xss攻击</li><li>firefox安全性不如chrome</li><li>特点：用户手动触发，危害小，不持久</li></ul><ol start="2"><li>XSS-存储型</li></ol><ul><li>黑客将恶意脚本代码上传(比如通过评论，存入到对方服务器)</li><li>当客户端重新使用数据时，服务器会返回恶意代码，再次执行</li><li>特点时持久，不需要用户触发，危害更大</li></ul><ol start="3"><li>DOM-base XSS</li></ol><ul><li>用户打开一个恶意的链接</li><li>浏览器在dom解析的时候直接使用恶意数据</li><li>innerHTML、document.write…</li></ul><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><ul><li>实现xss攻击的恶意脚本就叫做payload</li><li>xss钓鱼–通过xss向网页注入钓鱼链接，引导用户访问</li><li>通过payload拿到用户的sessionId后，就可以伪造成用户，进行操作</li><li>因为sessionId是唯一标识–后台识别客户</li><li>用户登陆后，后台会返回一个sessionId存储在客户端的cookie中</li><li>以后客户端每次请求都会把该cookie带上请求后端</li><li>所以cookie泄露会有很大风险</li></ul><h3 id="如何防御xss"><a href="#如何防御xss" class="headerlink" title="如何防御xss"></a>如何防御xss</h3><ol><li>设置cookie的httpOnly属性</li><li>这样在客户端就不能通过document.cookie获取到cookie</li><li>但是不能根本解决</li><li>永远不要相信前端的过滤，后台一定要进行过滤</li><li>设置白名单</li><li>设置黑名单</li><li>在标签里面、在属性上、在url地址、在函数参数传参写入时再次进行一层htmlEncode过滤</li></ol><h3 id="URL编码"><a href="#URL编码" class="headerlink" title="URL编码"></a>URL编码</h3><ol><li>encodeURI编码url的不对&amp;等保留字与特殊字符编码</li><li>encodeURIComponent用来编码传递参数的以及&amp;特殊符号</li><li>对一个get url的参数处理往往是二者一起使用</li></ol><h3 id="CSRF-跨站请求伪造"><a href="#CSRF-跨站请求伪造" class="headerlink" title="CSRF 跨站请求伪造"></a>CSRF 跨站请求伪造</h3><ol><li>用户A登陆银行网站，登陆成功后拿到cookie</li><li>黑客诱导A登陆他的钓鱼网站</li><li>在钓鱼网站的内部内置了一个iframe，设置width、height分别为0，链接到一个transfer页面</li><li>transfer页面模拟用户A发请求转账到指定账户，因为这时候因为A并没有成功退出，所以他的cookie仍然有效，可以作为登陆凭证</li></ol><h3 id="防御CSRF"><a href="#防御CSRF" class="headerlink" title="防御CSRF"></a>防御CSRF</h3><ol><li>svg-captcha // nodejs生成验证码</li><li>给用户一个验证码，但是影响用户体验</li><li>通过请求头referer判断是否是自己的站点，不可靠</li><li>参数伪造token，最主流的防御CSRF</li></ol><h3 id="token"><a href="#token" class="headerlink" title="token"></a>token</h3><ol><li>一次性的</li><li>用户不知情</li></ol><h3 id="XSS-CSRF-蠕虫"><a href="#XSS-CSRF-蠕虫" class="headerlink" title="XSS+CSRF=蠕虫"></a>XSS+CSRF=蠕虫</h3><h3 id="DDOS攻击"><a href="#DDOS攻击" class="headerlink" title="DDOS攻击"></a>DDOS攻击</h3><ol><li>分布式拒绝服务</li><li>黑客控制大量肉鸡向目标主机发送非正常请求，导致其消耗资源不能为合法用户的访问提供正常服务</li></ol><h3 id="防止DDOS"><a href="#防止DDOS" class="headerlink" title="防止DDOS"></a>防止DDOS</h3><ol><li>验证码</li><li>限制一个IP请求频率</li><li>增加机器增加服务器带宽</li><li>设置自己的业务为分布式服务，防止单点攻击</li><li>提高服务器负载能力</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;常见web攻击方式&quot;&gt;&lt;a href=&quot;#常见web攻击方式&quot; class=&quot;headerlink&quot; title=&quot;常见web攻击方式&quot;&gt;&lt;/a&gt;常见web攻击方式&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;XSS-反射型&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;跨站脚本攻击&lt;/
      
    
    </summary>
    
    
      <category term="web安全" scheme="http://yoursite.com/tags/web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>encrypt</title>
    <link href="http://yoursite.com/2019/09/01/encrypt/"/>
    <id>http://yoursite.com/2019/09/01/encrypt/</id>
    <published>2019-09-01T08:10:05.000Z</published>
    <updated>2019-09-01T08:21:43.719Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常见的前端加密库"><a href="#常见的前端加密库" class="headerlink" title="常见的前端加密库"></a>常见的前端加密库</h3><ol><li><a href="https://github.com/brix/crypto-js" target="_blank" rel="noopener">crypto-js</a></li><li><a href="https://github.com/bitwiseshiftleft/sjcl" target="_blank" rel="noopener">sjcl</a></li><li><a href="https://blog-static.cnblogs.com/files/mofish/md5.js" target="_blank" rel="noopener">md5</a></li><li><a href="https://blog-static.cnblogs.com/files/mofish/sha1.js" target="_blank" rel="noopener">sha1哈希加密</a></li><li><a href="https://github.com/beatgammit/base64-js" target="_blank" rel="noopener">base64</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;常见的前端加密库&quot;&gt;&lt;a href=&quot;#常见的前端加密库&quot; class=&quot;headerlink&quot; title=&quot;常见的前端加密库&quot;&gt;&lt;/a&gt;常见的前端加密库&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/brix/crypto-
      
    
    </summary>
    
    
      <category term="前端加密" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%8A%A0%E5%AF%86/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>canvas</title>
    <link href="http://yoursite.com/2019/09/01/canvas/"/>
    <id>http://yoursite.com/2019/09/01/canvas/</id>
    <published>2019-09-01T07:11:25.000Z</published>
    <updated>2019-09-01T07:38:59.854Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ol><li>HTML5新标签</li><li>本身不具备绘画功能</li><li>是一个矩形区域的画布</li><li>拥有多种绘制图形图像的方法</li></ol><h3 id="应用领域"><a href="#应用领域" class="headerlink" title="应用领域"></a>应用领域</h3><ol><li>游戏</li><li>广告</li><li>可视化数据</li></ol><h3 id="设置宽高"><a href="#设置宽高" class="headerlink" title="设置宽高"></a>设置宽高</h3><ol><li>设置宽度和高度，通过属性设置，不要通过css设置</li><li>对于一个canvas标签来说，使用的时候一定要设置width和height属性，否则绘制的图形有问题</li></ol><h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><ol><li>IE9才支持</li><li>不支持会认为是div</li><li>兼容性写法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas&gt;</span><br><span class="line">  ie9以上才支持canvas，请升级浏览器</span><br><span class="line">  &lt;!-- flash --&gt;</span><br><span class="line">&lt;/canvas&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>拿到canvas标签</li><li>拿到上下文</li><li>绘制</li></ol><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ol><li>moveTo // 移动画笔到指定位置，不设置，没有位置</li><li>lineTo // 画线</li><li>stroke // 描边</li><li>closePath // 路径闭合</li><li>fill // 填充</li></ol><h3 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h3><ol><li>strokeStyle // 设置描边颜色</li><li>lineWidth // 线宽</li><li>fillStyle // 设置填充颜色</li></ol><h3 id="a"><a href="#a" class="headerlink" title="(a)"></a>(a)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a = function() &#123;</span><br><span class="line">  console.log(1)</span><br><span class="line">&#125;</span><br><span class="line">var b = (a) // b = f() &#123;console.log(1)&#125;</span><br><span class="line">b() // 1</span><br></pre></td></tr></table></figure><h3 id="绘制表格"><a href="#绘制表格" class="headerlink" title="绘制表格"></a>绘制表格</h3><ol><li></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;HTML5新标签&lt;/li&gt;
&lt;li&gt;本身不具备绘画功能&lt;/li&gt;
&lt;li&gt;是一个矩形区域的画布&lt;/li&gt;
&lt;li&gt;拥有多种绘制图
      
    
    </summary>
    
    
      <category term="canvas" scheme="http://yoursite.com/tags/canvas/"/>
    
      <category term="html5" scheme="http://yoursite.com/tags/html5/"/>
    
  </entry>
  
  <entry>
    <title>yarn</title>
    <link href="http://yoursite.com/2019/08/29/yarn/"/>
    <id>http://yoursite.com/2019/08/29/yarn/</id>
    <published>2019-08-29T13:39:30.000Z</published>
    <updated>2019-08-29T15:03:43.214Z</updated>
    
    <content type="html"><![CDATA[<h3 id="带着问题学yarn？"><a href="#带着问题学yarn？" class="headerlink" title="带着问题学yarn？"></a>带着问题学yarn？</h3><ul><li>yarn是什么？</li><li>yarn有什么优点？</li><li>yarn可以做什么？</li><li>什么是一个package？</li><li>什么是一个包管理器？</li><li>公共包仓库是什么？</li><li>为什么需要包管理器？</li></ul><ol><li>package会进行缓存</li></ol><ul><li><p>npm i yarn -g</p></li><li><p>yarn -V</p></li><li><p>yarn init // 初始化一个package.json包</p></li><li><p>yarn add </p></li><li><p>yarn.lock // 存放各种包的信息</p></li><li><p>yarn upgrade webpack // 升级包</p></li><li><p>yarn cache ls // 查看本地安装了哪些缓存包</p></li><li><p>yarn cache dir // 查看package装在了本地什么路径</p></li><li><p>yarn cache clean // 清空本地缓存包</p></li><li><p>yarn add 已经缓存在本地的包 –offline // 离线安装</p></li><li><p>yarn install / yarn i / yarn // 安装项目依赖</p></li><li><p>dependences // 代码真正需要在浏览器上跑起来需要的一些依赖</p></li><li><p>devDependencies // 开发时需要的依赖</p></li><li><p>yarn remove [package] // 删除包</p></li><li><p>yarn install –production(prod) // 不会安装在devDependencies</p></li><li><p>yarn publish // publish a package to a package manager, the same as npm publish</p></li><li><p>yarn config</p></li><li><p>yarn config set registry registry.npm.taobao.org // 设置yarn安装源，提升安装包的时候的速度</p></li><li><p>yarn info [package] // 查看包的信息，可以时远程的包</p></li><li><p>yarn global add webpack // 把webpack安装在全局</p></li><li><p>yarn 不推荐把依赖包安装在全局，不清晰，在其他机器很难保证项目可以正确运行，放在package.json更加清晰明确</p></li><li><p>yarn self-upate // yarn的自我更新</p></li><li><p>yarn why [package] // 帮助寻找项目依赖,告诉我们为什么需要依赖</p></li><li><p>yarn check // 检查包的完整性</p></li><li><p>yarn run</p></li><li><p>example：create-dir：mkdir demo</p></li><li><p>rm-dir：rm -rf demo</p></li><li><p>yarn global ls // 查看全局安装的包</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;带着问题学yarn？&quot;&gt;&lt;a href=&quot;#带着问题学yarn？&quot; class=&quot;headerlink&quot; title=&quot;带着问题学yarn？&quot;&gt;&lt;/a&gt;带着问题学yarn？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;yarn是什么？&lt;/li&gt;
&lt;li&gt;yarn有什么优点？&lt;/li
      
    
    </summary>
    
      <category term="包管理工具" scheme="http://yoursite.com/categories/%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="包管理工具" scheme="http://yoursite.com/tags/%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>dart</title>
    <link href="http://yoursite.com/2019/08/25/dart/"/>
    <id>http://yoursite.com/2019/08/25/dart/</id>
    <published>2019-08-25T13:57:11.000Z</published>
    <updated>2019-08-29T15:03:23.779Z</updated>
    
    <content type="html"><![CDATA[<h3 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h3><ol><li><a href="http://www.gekorm.com/dart-windows/" target="_blank" rel="noopener">http://www.gekorm.com/dart-windows/</a> 安装dart sdk</li><li>vscode开发</li><li>vscode 安装dart、code runner扩展插件</li><li>Google开发</li><li>被flutter带火</li><li>2011年诞生</li></ol><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><ol><li>dart是一个强大的脚本语言</li><li>定义变量不指定类型，会自动推断，不能赋与其推断类型不一致的类型</li><li>String</li><li>int</li><li>dart存在类型校验</li></ol><h3 id="变量命名规则"><a href="#变量命名规则" class="headerlink" title="变量命名规则"></a>变量命名规则</h3><ol><li>字母、数字、下划线、$组成</li><li>区分大小写</li><li>不能以数字开头</li></ol><h3 id="dart常量"><a href="#dart常量" class="headerlink" title="dart常量"></a>dart常量</h3><ol><li>const 定义一个常量，编译时常量，一旦赋值不能修改</li><li>final 同样也是定义一个常量，但是比const强大，运行时常量，且属于惰性赋值</li></ol><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ol><li>三单(双)引号定义字符串，可以换行写字符串，单双引号则不行，只能写单行字符串</li><li>字符串拼接 $ +</li><li>String</li><li>int</li><li>bool</li><li>[]</li><li>new List(),add,下标从0开始，集合类型</li><li>new List<string>()</string></li><li>对象属性必须加引号</li><li>new Map()[“name”] = ‘hello wolrd’</li><li>is 类型判断</li></ol><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ol><li>??, example: b??=20 // 如果b为空的话就把20赋值给b</li></ol><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><ol><li>Number to String，toString()</li><li>String to Number，int.parse(str),double.parse()</li><li>try{}catch(err){}</li><li>string.isEmpty() // 判断字符串是否为空</li><li>number.isNaN()</li></ol><h3 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h3><ul><li>List<ul><li>List list = []</li><li>length</li><li>isEmpty</li><li>isNotEmpty</li><li>reversed // 逆转</li><li>toList() // 转为List集合</li><li>add() // 相当于push，一次加一个</li><li>addAll([‘test’, ‘hello’]) // 拼接数组</li><li>indexOf // 获取索引值，查不到返回-1</li><li>remove(value)</li><li>removeAt(index)</li><li>fillRange()</li><li>insert()</li><li>insertAll(1, [‘hello’, ‘world’])</li><li>join() // 转为字符串</li><li>split() // 字符串转为List数组</li></ul></li><li>Set<ul><li>去重</li><li>new Set()</li><li>add()</li></ul></li></ul><h3 id="函数与方法"><a href="#函数与方法" class="headerlink" title="函数与方法"></a>函数与方法</h3><ol><li>首字母小写，小驼峰</li><li>返回值类型 函数名() {函数体; return 返回值}</li><li>定义一个带可选参数的方法，String print(String username, [int age, String sex])</li><li>return “姓名:$username—年龄:$age”</li><li>定义一个命名参数的方法：String test(String name, {int age, String sex = ‘male’})</li></ol><h3 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h3><ol><li>OOP，面向对象的三个基本特征–封装、继承、多态</li><li>类由属性和方法组成</li><li>所有东西都是对象，都是继承自object</li><li>dart是一门使用类和单继承的面向对象，所有对象都是类的实例</li><li>构造方法/函数在程序一运行(实例化)的时候就会执行</li><li>dart里面构造函数可以写多个</li><li>Dart和其他面向OOP的语言不一样，没有public、private、protected这些访问修饰符，但是我们可以使用 _ 定义私有的属性和方法，然后还得抽离成一个文件才会生效</li><li>num</li><li>get 方法名 // 计算属性</li><li>set 方法名(value)</li></ol><h3 id="dart的抽象类"><a href="#dart的抽象类" class="headerlink" title="dart的抽象类"></a>dart的抽象类</h3><ol><li>定义一个Animal类，并且要求他的子类必须实现他的eat方法</li><li>抽象类是一个标准，对子类的一个约束</li><li>抽象类有多个方法时子类必须要全部实现</li><li>抽象类里面可以有普通方法</li><li>抽象类不能直接实例化</li></ol><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><ol><li>父类定义一个方法不去实现，让继承他的子类去实现它，每一个子类有不同的表现</li><li>官方表态：允许将子类类型的指针赋值给父类类型的指针，同一个函数的调用会有不同的执行效果，也就是说子类的实例赋值给父类的引用</li></ol><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><ol><li>dart中没有interface关键字</li><li>抽象类会被作为接口被实现</li><li>定义一个DB库 支持mysql mongodb mssql，这三个类中都有同样的方法</li><li>接口就是约定，一种规范</li><li>通过implements</li></ol><h3 id="一个类实现多个接口"><a href="#一个类实现多个接口" class="headerlink" title="一个类实现多个接口"></a>一个类实现多个接口</h3><ol><li>implements， 逗号隔开类名</li><li>实现所有方法和属性</li></ol><h3 id="mixins-新特性"><a href="#mixins-新特性" class="headerlink" title="mixins 新特性"></a>mixins 新特性</h3><ol><li>with</li><li>和继承有点相似</li><li>作为mixins的类只能继承自Object，不能继承其他类</li><li>作为mixins的类不能有构造函数</li><li>mixins的类型就是其超类的子类型</li></ol><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><ol><li>传入什么类型，返回什么类型</li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">T getData&lt;T&gt;(T value) &#123;</span><br><span class="line">  return value</span><br><span class="line">&#125;</span><br><span class="line">getData&lt;String&gt;(&apos;tet&apos;) // String给了T</span><br><span class="line">// 下面这种写法就不会对返回值类型进行校验</span><br><span class="line">getData&lt;T&gt;(T value) &#123;</span><br><span class="line">  return value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><ol><li>demo<ul><li>实现数据缓存的功能：有文件缓存、内存缓存、</li><li>定义一个泛型接口。约束实现他的子类必须有geyByKey(key)和setByKey(key, value)</li><li>要求setByKey的时候value的类型和实例化子类的时候指定的类型一致</li></ul></li><li>解决代码重用</li></ol><h3 id="库"><a href="#库" class="headerlink" title="库"></a>库</h3><ol><li>自定义</li><li>内置<ul><li>import ‘dart:io’</li><li>import ‘dart:math’</li></ul></li><li>pub</li><li>async是让方法变成异步</li><li>await是等待异步方法执行完成</li><li>从下面网站中找到我们想要的库：</li></ol><ul><li><a href="https://pub.dev/packages" target="_blank" rel="noopener">https://pub.dev/packages</a></li><li><a href="https://pub.flutter-io.cn/packages" target="_blank" rel="noopener">https://pub.flutter-io.cn/packages</a></li><li><a href="https://pub.dartlang.org/flutter/" target="_blank" rel="noopener">https://pub.dartlang.org/flutter/</a></li></ul><ol start="7"><li>pubspec.lock</li><li>pub get // 安装依赖</li><li>import ‘’ show getAge; // 从库中只引入getAge方法</li><li>import ‘’ as xxx; // 起个别名，解决冲突</li><li>import ‘’ hide getName; // 隐藏getName</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;环境安装&quot;&gt;&lt;a href=&quot;#环境安装&quot; class=&quot;headerlink&quot; title=&quot;环境安装&quot;&gt;&lt;/a&gt;环境安装&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.gekorm.com/dart-windows/&quot; target=&quot;_b
      
    
    </summary>
    
      <category term="Dart" scheme="http://yoursite.com/categories/Dart/"/>
    
    
      <category term="like C" scheme="http://yoursite.com/tags/like-C/"/>
    
  </entry>
  
  <entry>
    <title>Hello World --- Robin LEI</title>
    <link href="http://yoursite.com/2019/08/24/hello-world/"/>
    <id>http://yoursite.com/2019/08/24/hello-world/</id>
    <published>2019-08-24T08:05:11.966Z</published>
    <updated>2019-08-24T10:04:16.507Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>

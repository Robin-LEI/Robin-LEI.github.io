<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Robin LEI</title>
  
  <subtitle>用代码改变世界，因为喜欢所以热爱!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-23T15:05:07.105Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Robin LEI</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>angular</title>
    <link href="http://yoursite.com/2019/10/16/angular/"/>
    <id>http://yoursite.com/2019/10/16/angular/</id>
    <published>2019-10-16T15:10:13.000Z</published>
    <updated>2019-10-23T15:05:07.105Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title: angular<br>date: 2019-10-16 23:10:13</p><h2 id="tags-angular"><a href="#tags-angular" class="headerlink" title="tags: [angular]"></a>tags: [angular]</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ol><li>npm i -g @angular/cli</li><li>ng -v</li><li>ng new project</li><li>ng serve –open</li><li>ie8不支持angular</li><li>ng new project –skip-install // 不会安装依赖</li></ol><h3 id="创建组件"><a href="#创建组件" class="headerlink" title="创建组件"></a>创建组件</h3><ol><li>ng g component 名称</li><li>ng g component components/new // 在app目录下，创建一个文件夹，文件夹下面创建一个new文件夹，里面时new的组件内容</li><li>之前传统网站，我们想把头部和底部等拆成单个文件来写，但是受困于当时技术，不容易实现，angular的组件帮助我们实现了这一梦想</li></ol><h3 id="属性修饰符"><a href="#属性修饰符" class="headerlink" title="属性修饰符"></a>属性修饰符</h3><ol><li>public：在当前类、子类、类的外部类也可以访问</li><li>private：当前类</li><li>protected：当前类及其子类</li></ol><h3 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h3><div [title]="titleContent"></div><h3 id="html解析绑定"><a href="#html解析绑定" class="headerlink" title="html解析绑定"></a>html解析绑定</h3><div [innerhtml]="content"></div><h3 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a>定义数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 1.</span><br><span class="line">public list:any[] = [1,&apos;2&apos;]</span><br><span class="line"></span><br><span class="line">// 2.</span><br><span class="line">public list:Array&lt;any&gt; = [1,&apos;2&apos;]</span><br></pre></td></tr></table></figure><h3 id="数据循环"><a href="#数据循环" class="headerlink" title="数据循环"></a>数据循环</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">  &lt;li *ngFor=&quot;let item of lists;let key=index&quot;&gt;&#123;&#123;item.name&#125;&#125;----&#123;&#123;item.age&#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure><h3 id="引入图片"><a href="#引入图片" class="headerlink" title="引入图片"></a>引入图片</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 加载本地图片</span><br><span class="line">&lt;img src=&quot;assets/images/test.png&quot; /&gt;</span><br><span class="line">// 加载远程图片</span><br><span class="line">&lt;img [src]=&quot;picUrl&quot; /&gt;</span><br></pre></td></tr></table></figure><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><ol><li>*ngIf</li><li>*ngSwitch</li></ol><h3 id="ngClass"><a href="#ngClass" class="headerlink" title="ngClass"></a>ngClass</h3><ol><li><figure class="highlight plain"><figcaption><span>[ngClass]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### ngStyle</span><br><span class="line">1. ```&lt;span [ngStyle]=&quot;&#123;&apos;color&apos;: &apos;red&apos;&#125;&quot;&gt;&lt;/span&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><ol><li><figure class="highlight plain"><figcaption><span>| date: 'yyyy-mm-dd'&#125;&#125;```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 事件</span><br><span class="line">1. ```&lt;button (click) = &quot;run()&quot;&gt;&lt;/button&gt;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><figcaption><span>(keydown)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 双向数据绑定</span><br><span class="line">1. 只是针对表单</span><br><span class="line"></span><br><span class="line">### 服务</span><br><span class="line">1. 两个组件是不能进行通信的，A组件不能调用B组件的方法</span><br><span class="line">2. 如果我们要定义一个公共的方法，使得在A、B组件都能使用，我们需要把这个方法放在服务当中</span><br><span class="line">3. 创建服务</span><br></pre></td></tr></table></figure></li></ol><p>ng g service my-service<br>// 或者<br>ng g service services/test</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 生命周期函数</span><br><span class="line">1. ngOnInit()页面刷新会触发这个生命周期函数,组件和指令初始化完成，并不是dom加载完成</span><br><span class="line">2. ngAfterViewInit() // 视图加载完成以后触发，可以获取dom</span><br><span class="line"></span><br><span class="line">### 获取dom</span><br></pre></td></tr></table></figure><p>import { Component, OnInit, ViewChild } from ‘@angular/core’;</p><div #box>  这是一个div</div>@ViewChild('box', {static: true}) box:any;ngAfterViewInit(): void {  console.log(this.box.nativeElement)  this.box.nativeElement.style.width = '100px'  this.box.nativeElement.style.height = '100px'  this.box.nativeElement.style.background = 'red'  console.log(this.box.nativeElement.innerHTML)}```<h3 id="父组件调用子组件里面的方法"><a href="#父组件调用子组件里面的方法" class="headerlink" title="父组件调用子组件里面的方法"></a>父组件调用子组件里面的方法</h3><ol><li>@ViewChild</li></ol><h3 id="组件传值"><a href="#组件传值" class="headerlink" title="组件传值"></a>组件传值</h3><ol><li>父组件–&gt;子组件：使用Input装饰器,还可以把整个父组件的实例传递给子组件, [home]=”this”</li><li>子组件提供@output和EventEmitter给父组件传值</li><li>非父子组件的通信使用localstorage和服务</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;title: angular&lt;br&gt;date: 2019-10-16 23:10:13&lt;/p&gt;
&lt;h2 id=&quot;tags-angular&quot;&gt;&lt;a href=&quot;#tags-angular&quot; class=&quot;headerlink&quot; title=&quot;tags: [angul
      
    
    </summary>
    
    
      <category term="angular" scheme="http://yoursite.com/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>js</title>
    <link href="http://yoursite.com/2019/10/11/js/"/>
    <id>http://yoursite.com/2019/10/11/js/</id>
    <published>2019-10-11T14:04:05.000Z</published>
    <updated>2019-10-21T13:08:14.572Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ol><li>基本数据类型<ul><li>Number、String、Boolean、Null、Undefined、Symbol</li><li>基本数据类型存储在栈内存中</li></ul></li><li>引用数据类型<ul><li>除了上述几种，剩下的都是引用数据类型</li><li>Array</li><li>Object</li><li>Function</li><li>RegExp</li><li>Date</li><li>引用数据类型存储在堆内存中</li></ul></li></ol><h3 id="类型检测"><a href="#类型检测" class="headerlink" title="类型检测"></a>类型检测</h3><ol><li>typeof<ul><li>经常用来检测一个变量是不是基础数据类型</li><li>不能用来检测引用数据类型</li><li>检测 null，[]，/\d+/，{}，new Date()都是object</li></ul></li><li>instanceof<ul><li>检测一个构造函数的prototype属性是否存在于另一个要检测对象的原型链上</li><li>比如 A instanceof B，就是要检测B.prototype是否存在于A对象的原型链上</li><li>判断继承或者实例属于哪一个类型的时候比使用typeof更好用</li><li>不能检测字面量方式创建的基本数据类型</li><li>不能检测null和undefined</li></ul></li><li>Object.prototype.toString.call()</li></ol><h3 id="cooke、session、localStorage"><a href="#cooke、session、localStorage" class="headerlink" title="cooke、session、localStorage"></a>cooke、session、localStorage</h3><ol><li>localStorage<ul><li>存储的数据是永久性的，除非用户手动删除，否则浏览器关闭后数据还是存在的</li><li>其作用域是限定在文档源级别的，所谓的文档源是指通过协议、主机名、端口号来确定的</li><li>同源的文档间共享localStorage</li></ul></li><li>sessionStorage<ul><li>关闭标签页，session清空</li><li>关闭浏览器，session清空</li></ul></li><li>二者的区别在于存储的有效期和作用域的不同，也就是说数据可以存储多长时间以及谁拥有数据的访问权</li><li>cookie<ul><li>默认的有效期很短暂，只能持续在web浏览器的会话期间，一旦用户关闭浏览器，cookie数据就会丢失</li><li>关闭标签页，cookie不会丢失</li><li>有的浏览器不允许保存超过300个cookie</li><li>单个cookie保存的数据不能超过4kb</li></ul></li></ol><h3 id="null和undefined"><a href="#null和undefined" class="headerlink" title="null和undefined"></a>null和undefined</h3><ol><li>null是JavaScript语言的关键字</li><li>变量没有初始化、数组根据越界索引获取元素、对象属性不存在、函数没有返回值、没有提供函数实参的形参，这时候返回undefined</li><li>JavaScript权威指南：你或许认为undefined是表示系统级的，出乎意料的错误，null表示正常的意料之中，当给一个变量赋值或者给一个函数传参时，使用null更好</li></ol><h3 id="函数的prototype"><a href="#函数的prototype" class="headerlink" title="函数的prototype"></a>函数的prototype</h3><ol><li>每一个函数都有一个prototype属性，默认指向一个空object对象(实例对象)(原型对象)(但是Object不满足)，空对象是指没有我们的属性</li><li>原型对象有一个constructor属性，指向其构造函数(函数对象)</li><li>原型对象上的方法是给实例对象用的</li><li>typeof Fn.prototype === ‘object’ // true</li><li>函数对象是在函数定义的时候创建</li><li>function Fn() {} // this.prototype = {}</li><li>new Fn() // this.<strong>proto</strong> = Fn.prototype</li><li>任何函数，不管是内置函数还是自定义的函数，都是new Function的实例，保活它本身(Function也是Function的实例)</li><li>Object的原型对象是原型链的尽头，因为Object.prototype.<strong>proto</strong> === null</li></ol><h3 id="显示原型"><a href="#显示原型" class="headerlink" title="显示原型"></a>显示原型</h3><ol><li>每个function都有一个prototype，就是显示原型(属性)</li><li>Fn.prototype指向一个空对象，这个空对象是Object的实例</li><li>代码一执行，Object对象就已经存在</li></ol><h3 id="隐式原型"><a href="#隐式原型" class="headerlink" title="隐式原型"></a>隐式原型</h3><ol><li>每一个实例对象都有一个<strong>proto</strong>，称为隐式原型(属性)</li><li>隐式原型的值就是等于其构造函数显示原型的值</li></ol><h3 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h3><ol><li>构造函数的实例对象自动拥有构造函数原型对象上的属性(方法)</li><li>利用的就是原型链</li></ol><h3 id="原型链属性"><a href="#原型链属性" class="headerlink" title="原型链属性"></a>原型链属性</h3><ol><li>读取对象的属性时，会自动的到原型链上查找</li><li>设置对象的属性时，不会查找原型链，如果当前对象没有此属性，直接添加此属性并且设置值</li><li>方法一般定义再原型上，属性一般通过构造函数定义再对象本身</li></ol><h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><ol><li><p>A instanceof B</p></li><li><p>如果B函数的显示原型对象在A对象的原型链上，返回true，否则返回false</p></li><li><p>A是实例对象</p></li><li><p>Object.prototype是原型链的终点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Object instanceof Function</span><br><span class="line">Object instanceof Obejct</span><br><span class="line">Function instanceof Function</span><br><span class="line">Function instanceof Obejct</span><br><span class="line"></span><br><span class="line">function Foo() &#123;&#125;</span><br><span class="line">Object instanceof Foo</span><br></pre></td></tr></table></figure></li><li><p>function Object() {}是new Function产生的</p></li><li><p>function Foo() {} . <strong>proto</strong> 指向Function.prototype</p></li></ol><h3 id="图解原型链"><a href="#图解原型链" class="headerlink" title="图解原型链"></a>图解原型链</h3><ol><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/10/14/KpR7gH.png" alt="图解1" title>                </div>                <div class="image-caption">图解1</div>            </figure></li><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/10/14/KpRjVP.md.png" alt="图解2" title>                </div>                <div class="image-caption">图解2</div>            </figure></li><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/10/14/KpRvUf.png" alt="图解3" title>                </div>                <div class="image-caption">图解3</div>            </figure></li></ol><h3 id="测试题"><a href="#测试题" class="headerlink" title="测试题"></a>测试题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">var A = function() &#123;</span><br><span class="line">&#125;</span><br><span class="line">A.prototype.n = 1</span><br><span class="line">var b = new A()</span><br><span class="line">A.prototype = &#123;</span><br><span class="line">n: 2,</span><br><span class="line">m: 3</span><br><span class="line">&#125;</span><br><span class="line">var c = new A()</span><br><span class="line">console.log(b.n, b.m, c.n, c.m)</span><br><span class="line"></span><br><span class="line">var F = function() &#123;&#125;</span><br><span class="line">Object.prototype.a = function() &#123;</span><br><span class="line">console.log(&apos;a()&apos;)</span><br><span class="line">&#125;</span><br><span class="line">Function.prototype.b = function() &#123;</span><br><span class="line">console.log(&apos;b()&apos;)</span><br><span class="line">&#125;</span><br><span class="line">var f = new F()</span><br><span class="line">f.a()</span><br><span class="line">f.b()</span><br><span class="line">F.a()</span><br><span class="line">F.b()</span><br></pre></td></tr></table></figure><h3 id="变量提升与函数提升"><a href="#变量提升与函数提升" class="headerlink" title="变量提升与函数提升"></a>变量提升与函数提升</h3><ol><li>变量声明提升<ul><li>通过var定义(声明)的变量，在定义语句之前就可以访问到</li><li>值：undefined</li></ul></li><li>函数声明提升<ul><li>通过function声明的函数，在之前就可以直接调用</li><li>值：函数定义(对象)</li></ul></li><li>变量提升和函数提升产生的原因?</li></ol><h3 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h3><ol><li>全局执行上下文<ul><li>在执行全局代码前，已经将window确定为全局执行上下文</li><li>对全局数据进行预处理<ul><li>var声明的全局变量==&gt;undefined，添加为window属性</li><li>function声明的全局函数==&gt;添加为window的方法</li><li>this赋值为window</li></ul></li><li>开始执行上下文</li></ul></li><li>函数执行上下文<ul><li>在调用函数，准备执行函数体之前，创建对应的函数执行上下文对象(虚拟的，存在于栈中)</li><li>对局部数据进行预处理<ul><li>形参变量==&gt;赋值(实参)==&gt;添加为执行上下文的属性</li><li>arguments==&gt;赋值(实参列表)，添加为执行上下文的属性</li><li>var==&gt;undefined</li><li>function==&gt;赋值，添加为执行上下文的方法</li><li>this==&gt;赋值(调用函数的对象)</li></ul></li><li>开始执行函数体代码</li></ul></li></ol><h3 id="执行上下文栈"><a href="#执行上下文栈" class="headerlink" title="执行上下文栈"></a>执行上下文栈</h3><h3 id="常见内置对象"><a href="#常见内置对象" class="headerlink" title="常见内置对象"></a>常见内置对象</h3><ol><li>Number</li><li>Math</li><li>Date</li><li>RegExp</li><li>String</li><li>Array</li><li>Object</li><li>Function</li><li>Error</li></ol><h3 id="var-a-b-1和var-a-1-b-1有什么区别"><a href="#var-a-b-1和var-a-1-b-1有什么区别" class="headerlink" title="var a = b = 1和var a = 1, b = 1有什么区别"></a>var a = b = 1和var a = 1, b = 1有什么区别</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// 1.</span><br><span class="line">function test() &#123;</span><br><span class="line">var a = b = 1</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br><span class="line">console.log(a); // a is not defined</span><br><span class="line">console.log(b); // 1</span><br><span class="line">/**</span><br><span class="line"> * var a = b = 1可以被拆分成：</span><br><span class="line"> * b = 1 // 这时候b是全局变量，因为没有用var声明</span><br><span class="line"> * var a = b // a是函数里面声明的局部变量，当函数执行完后，被释放了</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">// 2.</span><br><span class="line">function test() &#123;</span><br><span class="line">var a = 1, b = 1 // a, b都是局部变量</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br><span class="line">console.log(a); // a is not defined</span><br><span class="line">console.log(b); // b is not defined</span><br><span class="line"></span><br><span class="line">// 3.</span><br><span class="line">&quot;use strict&quot;;</span><br><span class="line">var a = b = 1 // 在严格模式下,变量必须先声明,在赋值,否则是不会进行转为全局变量的</span><br><span class="line">console.log(a, b); // b is not defined</span><br><span class="line"></span><br><span class="line">// 4.</span><br><span class="line">&quot;use strict&quot;;</span><br><span class="line">var a = 1, b = 1 </span><br><span class="line">console.log(a, b); // 1 1</span><br></pre></td></tr></table></figure><h3 id="作用域与作用域链"><a href="#作用域与作用域链" class="headerlink" title="作用域与作用域链"></a>作用域与作用域链</h3><h3 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h3><h3 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h3><h3 id="call、apply、bind"><a href="#call、apply、bind" class="headerlink" title="call、apply、bind"></a>call、apply、bind</h3><h3 id="new发生了什么"><a href="#new发生了什么" class="headerlink" title="new发生了什么"></a>new发生了什么</h3><ol><li>在堆中开辟了一块内存地址空间</li><li>让实例对象的<strong>proto</strong>指向了构造函数的prototype(原型)对象</li><li>实例对象继承构造函数原型对象上的属性和方法</li></ol><h3 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h3><h3 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h3><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><h3 id="箭头函数和普通函数区别"><a href="#箭头函数和普通函数区别" class="headerlink" title="箭头函数和普通函数区别"></a>箭头函数和普通函数区别</h3><ol><li>箭头函数不能new，没有自己的this</li><li>当箭头函数不存在<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">let obj = &#123;</span><br><span class="line">id: 100,</span><br><span class="line">test: () =&gt; &#123;</span><br><span class="line">console.log(this) // window</span><br><span class="line">console.log(this.id) // undefined</span><br><span class="line">&#125;,</span><br><span class="line">say: function() &#123;</span><br><span class="line">console.log(this) // obj</span><br><span class="line">setTimeout(function() &#123; // 注意：定时器中的函数肯定是被window对象调用的</span><br><span class="line">console.log(this.id) // undefined</span><br><span class="line">&#125;, 100)</span><br><span class="line">&#125;,</span><br><span class="line">hi: function() &#123;</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">console.log(this.id) // obj</span><br><span class="line">&#125;, 100)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="如何给在不消耗性能的情况下给1000个item注册事件"><a href="#如何给在不消耗性能的情况下给1000个item注册事件" class="headerlink" title="如何给在不消耗性能的情况下给1000个item注册事件"></a>如何给在不消耗性能的情况下给1000个item注册事件</h3><h3 id="第一次访问www-baidu-com和第二次访问www-baidu-com有什么区别吗"><a href="#第一次访问www-baidu-com和第二次访问www-baidu-com有什么区别吗" class="headerlink" title="第一次访问www.baidu.com和第二次访问www.baidu.com有什么区别吗?"></a>第一次访问<a href="http://www.baidu.com和第二次访问www.baidu.com有什么区别吗" target="_blank" rel="noopener">www.baidu.com和第二次访问www.baidu.com有什么区别吗</a>?</h3><h3 id="valueOf与toString"><a href="#valueOf与toString" class="headerlink" title="valueOf与toString"></a>valueOf与toString</h3><h3 id="文档碎片"><a href="#文档碎片" class="headerlink" title="文档碎片"></a>文档碎片</h3><h3 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h3><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><h3 id="在不定义第三方变量的情况下，交换a、b的值"><a href="#在不定义第三方变量的情况下，交换a、b的值" class="headerlink" title="在不定义第三方变量的情况下，交换a、b的值"></a>在不定义第三方变量的情况下，交换a、b的值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var a = 1</span><br><span class="line">var b = 2</span><br><span class="line">// 1.</span><br><span class="line">a = a - b</span><br><span class="line">b = a + b</span><br><span class="line">a = b - a</span><br><span class="line"></span><br><span class="line">// 2.</span><br><span class="line">a = a^b</span><br><span class="line">b = a^b</span><br><span class="line">a = a^b</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;基本数据类型&lt;ul&gt;
&lt;li&gt;Number、String、Boolean、Null、Undefined、Symb
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>vue</title>
    <link href="http://yoursite.com/2019/10/07/vue/"/>
    <id>http://yoursite.com/2019/10/07/vue/</id>
    <published>2019-10-07T03:03:33.000Z</published>
    <updated>2019-10-21T13:06:20.651Z</updated>
    
    <content type="html"><![CDATA[<h3 id="说说你对SPA单页面的理解？"><a href="#说说你对SPA单页面的理解？" class="headerlink" title="说说你对SPA单页面的理解？"></a>说说你对SPA单页面的理解？</h3><ol><li>single-page-application，只在页面初次渲染时加载HTML、JavaScript、CSS</li><li>优点：用户体验好–&gt;无刷新加载页面，网站整体速度变快，避免了不必要得跳转和重复的渲染–&gt;减轻了服务器端的压力，前后端架构更加清晰，前端负责交互逻辑，后端负责处理数据</li><li>缺点：首屏加载可能比较慢，不利于SEO–&gt;因为所有的内容都在一个页面中动态的显示</li></ol><h3 id="v-if-and-v-show"><a href="#v-if-and-v-show" class="headerlink" title="v-if and v-show"></a>v-if and v-show</h3><ol><li>v-if是真正意义上的dom的显示与隐藏，适用于不需要频繁地切换条件的场景–&gt;因为减少切换dom显示与隐藏的开销</li><li>v-show是样式display上的显示与隐藏，会带来渲染上的开销，适用于频繁改变条件的场景</li></ol><h3 id="class与style如何动态绑定"><a href="#class与style如何动态绑定" class="headerlink" title="class与style如何动态绑定?"></a>class与style如何动态绑定?</h3><ol><li><p>class</p><ul><li><p>对象语法</p><ul><li><figure class="highlight plain"><figcaption><span>:class</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 数组语法</span><br><span class="line">+ ```&lt;div v-bind:class=[isBox ? &apos;box&apos; : &apos;&apos;, isHasItem]&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><figcaption><span>&#123;isHasItem: 'item'&#125;```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2. style</span><br><span class="line">- 对象语法</span><br><span class="line">+ ```&lt;div :style=&#123;color: isColor, fontSize: fontSize&#125;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><figcaption><span>&#123;isColor: 'red', fontSize: '20px'&#125;```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 数组语法</span><br><span class="line">+ ```&lt;div :style=[Color, Size]&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><figcaption><span>&#123;Color: &#123;color: 'red'&#125;, Size: &#123;fontSize: '20px'&#125;&#125;```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 如何理解Vue的单向数据流?</span><br><span class="line">1. 父组件通过props把数据传递给子组件，当父组件的props更新时，子组件也会自动更新</span><br><span class="line">2. 但是，反之如果子组件修改父组件传递过来的props是不被允许的，因为这会导致其它使用同一props的子组件发生紊乱</span><br><span class="line">3. 有两种情况我们往往想要去修改父组件传递来的props</span><br><span class="line">- 子组件把父组件的props当作局部数据来使用，解决办法：在定义一个变量去把props作为初始值</span><br><span class="line">- 子组件想要把父组件的props加以修缮变成自己想要的数据时，解决办法：使用computed计算属性</span><br><span class="line">4. JS中数组和对象是引用数据类型，当props是数组或者对象时，子组件如果修改了它，会导致父组件的状态发生改变，解决办法：子组件可以深拷贝一份父组件的props</span><br><span class="line"></span><br><span class="line">### Vue中父组件和子组件的生命周期钩子函数的执行顺序?</span><br><span class="line">1. 加载渲染过程</span><br><span class="line">- beforeCreate(父组件)-&gt;created(父组件)-&gt;beforeMount(父组件)-&gt;beforeCreate(子组件)-&gt;created(子组件)-&gt;beforeMount(子组件)-&gt;mounted(子组件)-&gt;mounted(父组件)</span><br><span class="line">2. 子组件更新</span><br><span class="line">- beforeUpdate(父组件)-&gt;beforeUpdate(子组件)-&gt;updated(子组件)-&gt;updated(父组件)</span><br><span class="line">3. 父组件更新</span><br><span class="line">- beforeUpdate(父组件)-&gt;updated(父组件)</span><br><span class="line">4. 组件销毁</span><br><span class="line">- beforeDestroy(父组件)-&gt;beforeDestroy(子组件)-&gt;destroyed(子组件)-&gt;destroyed(父组件)</span><br><span class="line"></span><br><span class="line">### 在哪个生命周期钩子函数内去调用异步API?</span><br><span class="line">1. 要想能够去调用api，首先组件内部的data必须要先创建完成</span><br><span class="line">2. 在created，beforeMount，mounted中data均已经创建完成，但是推荐在created中调用</span><br><span class="line">3. 因为可以减少loading等待时间</span><br><span class="line">4. vue的nuxt.js SSR不支持beforeMount和mounted，放在created中更加有利于项目的移植</span><br><span class="line"></span><br><span class="line">### 父组件监听子组件的生命周期?</span><br><span class="line">1. 在某些情况下，子组件如果挂载完成之后，父组件需要做一些业务逻辑，那么就需要去监听子组件的mounted钩子函数</span><br><span class="line">2. 第一种方法</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol><p>// Parent.vue<br>&lt;Child @mounted=’do’&gt;<br>do() {}</p><p>// Child.vue<br>mounted() {<br>    this.$emit(‘mounted’) // 子组件需要手动触发<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3. 第二种方法,@hook也可以监听created和updated等钩子函数</span><br></pre></td></tr></table></figure><p>// Parent.vue<br>&lt;Child @hook:mounted=’do’&gt;<br>do() {}</p><p>// Child.vue<br>mounted() {</p><p>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### Vue项目的性能优化</span><br><span class="line">1. 代码层面</span><br><span class="line">- v-if、v-show的使用场景</span><br><span class="line">- computed、watch的使用场景</span><br><span class="line">- v-for加key</span><br><span class="line">- 长列表的渲染时使用Object.freeze()冻结一个对象，对象被冻结以后，只能读，加入某个组件单纯的只负责显示，没有任何其他操作，这时我们就不想再对其使用Object.defineProperty()，层面数据劫持，这可以减少组件初始化的时间</span><br><span class="line">- 事件使用之后要进行销毁</span><br><span class="line">- 图片的懒加载</span><br><span class="line">- 路由的懒加载</span><br><span class="line">2. webpack</span><br><span class="line">- 图片压缩</span><br><span class="line">- 提取公共代码</span><br><span class="line">- 优化sourceMap</span><br><span class="line">3. web层面</span><br><span class="line">- 服务端开启gzip压缩</span><br><span class="line">- 某些资源使用CDN</span><br><span class="line">- 浏览器缓存机制</span><br><span class="line"></span><br><span class="line">### Vue的SSR</span><br><span class="line">1. vue在客户端渲染标签为html片段的工作交给了服务端，服务端直接返回给客户端一个已经渲染完成的html片段</span><br><span class="line">2. 优点：对SEO更友好，之前页面的内容是通过Ajax获取到的，Ajax是异步的，搜索引擎的爬虫不会去等待异步完成之后再去爬取页面内容，所以爬虫爬不到数据，但是采用了SSR服务端渲染，爬虫爬取的时候页面已经存在了html和数据，不容易出现首页白屏</span><br><span class="line">3. 缺点：增加了服务端的压力</span><br><span class="line"></span><br><span class="line">### Vuex</span><br><span class="line">1. state 存储数据状态的</span><br><span class="line">2. getter 获取store中数据的</span><br><span class="line">3. mutation 修改store中state的状态，同步</span><br><span class="line">4. action 异步，先通过commit触发mutation再去修改状态</span><br><span class="line">5. module 把store拆分，往往在大型项目中使用</span><br><span class="line"></span><br><span class="line">### Vue组件通信</span><br><span class="line">1. props/$emit 父子组件通信</span><br><span class="line">2. event bus 父子、兄弟、隔代组件通信</span><br><span class="line">3. ref/$parent/$children 父子组件通信</span><br><span class="line">4. vuex 所有的都适用，但是最好在大一点的项目中使用比较合适</span><br><span class="line">5. $attrs/$listeners 隔代组件</span><br><span class="line">6. provide/inject 适用于隔代组件</span><br><span class="line"></span><br><span class="line">### 为什么Vue中组件的data必须是一个函数function</span><br><span class="line">1. vue组件中的data必须是一个function，且需要返回一个&#123;&#125;</span><br><span class="line">2. vue实例中的data只需要是一个对象即可</span><br><span class="line">3. 因为组件是可以复用的，每复用一次，就会产生一个实例，多个实例之间共享一个对象，因为他们是同一个对象的引用，这样在一个页面中改变组件的值，会影响其他页面的同一个组件，如果组件返回一个&#123;&#125;，这个多个实例指向不同的数据对象</span><br><span class="line">4. 而 new Vue 的实例，是不会被复用的，因此不存在引用对象的问题。</span><br><span class="line"></span><br><span class="line">### keep-alive</span><br><span class="line">1. 避免组件的不必要的再次渲染，常常配合路由meta一起使用</span><br><span class="line">2. 配合动态组件使用时，可以保持组件的之前的状态</span><br><span class="line">3. 两大属性include、exclude</span><br></pre></td></tr></table></figure><keep-alive inlcude="A,B">    <router-view></router-view></keep-alive><keep-alive exclude="C">    <router-view></router-view></keep-alive><p>// include表示只要name属性为A，B的组件才会进行缓存，注意这里的name时组件的名称<br>// exclude表述除了组件C以外的都会被缓存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### vue-router的钩子函数</span><br><span class="line">1. 导航钩子其实就是指路由的生命周期函数</span><br><span class="line">2. 导航的钩子分为全局的和局部的还有组件的</span><br><span class="line">3. 全局的有beforeEach、afterEach</span><br><span class="line">4. 单个路由局部的钩子函数有beforeEnter</span><br><span class="line">5. 单个组件内的钩子函数有beforeRouterEnter、beforeRouterUpdate、beforeRouterLeave</span><br><span class="line"></span><br><span class="line">### 插槽</span><br><span class="line">1. 默认插槽(匿名插槽)】</span><br><span class="line">```&lt;slot&gt;&lt;/slot&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>具名插槽 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 插槽</span><br><span class="line">&lt;slot name=&apos;test&apos;&gt;&lt;/slot&gt;</span><br><span class="line">// 使用</span><br><span class="line">&lt;div slot=&apos;test&apos;&gt;</span><br><span class="line">这是具名插槽</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li>作用域插槽 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// Parent.vue</span><br><span class="line">&lt;Child&gt;</span><br><span class="line">&lt;template slot-scope=&quot;list(这个名字随便起)&quot;&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for=&quot;item in list.list&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/Child&gt;</span><br><span class="line"></span><br><span class="line">// 如果不使用作用域插槽提供的数据，这个时候作用域插槽摇身一变变为匿名插槽</span><br><span class="line">&lt;Child&gt;</span><br><span class="line">&lt;p&gt;你好，我就不使用你的数据&lt;/p&gt;</span><br><span class="line">&lt;/Child&gt;</span><br><span class="line"></span><br><span class="line">// Child.vue</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;slot :data=&quot;list&quot;&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">list: [1,2,3]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="nextTick"><a href="#nextTick" class="headerlink" title="$nextTick"></a>$nextTick</h3><ol><li>vue中并不是数据更新之后，dom立即更新</li><li>nextTick()在下次dom更新结束之后，执行的回调函数，可以获取更新后的dom<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 修改数据</span><br><span class="line">this.list = [1,2,3]</span><br><span class="line">this.$nextTick(() =&gt; &#123;</span><br><span class="line">// 获取更新后的dom</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><ol><li>model、view、controller</li><li>当用户输入信息先到达controller，controller判断如果这个信息不需要调取接口，则会自己处理后直接把信息返回给view(用户)</li><li>如果controller判断需要调取后端api，这个时候会把信息传递到model层，在model层去调取接口，处理数据后，由model层把信息传递给view层</li><li>view层和model层也是可以直接交互的，如果view层传出的信息不涉及到业务处理，也可以直接和model层直接交互</li><li>MVC最大的缺点就是反馈信息不及时，由此诞生了MVVM</li></ol><h3 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h3><ol><li>与MVC一起，都属于一种架构模式</li><li>由三部分构成，model、view、viewModel</li><li>model与view没有联系，view和viewModel以及model与viewModel之间是相互联系的</li><li>viewModel就像是一个中间件，处理所有的业务逻辑，使得model和view更加专注于做自己的事情</li><li>采用MVVM模式，使得代码的解耦性更强，缺点是不利于调式，无法第一时间判断错误来自view层还是model层</li></ol><h3 id="虚拟dom"><a href="#虚拟dom" class="headerlink" title="虚拟dom"></a>虚拟dom</h3><ol><li>采用虚拟dom提升了效率，本质上优化了diff算法</li><li>使用JS对象去创建真实dom</li><li>在dom更新的时候，采用新旧dom对比，找出差异部分(也是一个JS对象)，然后更新为真实dom</li><li>虚拟dom更加适合批量操作dom</li></ol><h3 id="React-vs-Vue"><a href="#React-vs-Vue" class="headerlink" title="React vs Vue"></a>React vs Vue</h3><ol><li>相同点<ul><li>采用组件化开发，使得代码的复用性更高</li><li>都有自己的服务端渲染(SSR)</li><li>都有虚拟dom</li><li>都可以通过props在父子组件之间进行通信</li><li>都是靠数据驱动</li></ul></li><li>不同点<ul><li>vue中的数据绑定是双向的，界面于数据之间</li><li>react是单向数据流，只能由数据到界面</li><li>写法不同，vue采用的是模板，react使用的是jsx(js的扩展)</li><li>vue没有state的概念，相对应的是data，修改data数据比较随意</li><li>react有state概念，且修改数据必须通过setState</li></ul></li></ol><h3 id="vue-cli的生成的项目目录和各个文件的作用"><a href="#vue-cli的生成的项目目录和各个文件的作用" class="headerlink" title="vue-cli的生成的项目目录和各个文件的作用"></a>vue-cli的生成的项目目录和各个文件的作用</h3><ol><li>build // webpack的配置文件<ul><li>build.js // webpack的打包配置文件</li><li>check-version.js // 检查node、npm版本</li><li>utils.js // 项目的构建工具</li><li>webpack.base.conf.js // webpack的公共配置</li><li>webpack.dev.conf.js // 开发配置</li><li>webpack.prod.conf.js // 生产配置</li></ul></li><li>config // 变量的配置文件<ul><li>index.js // 公共变量配置</li><li>dev.env.js // 开发环境变量配置</li><li>prod.env.js // 生产环境变量配置</li></ul></li><li>node_modules // 包管理工具下载的依赖</li><li>src // 项目的源代码<ul><li>assets // 静态资源存放，如图片</li><li>components // 项目的组件存放</li><li>router // 路由</li><li>App.vue // 项目的入口</li><li>main.js // 程序的入口</li></ul></li><li>test // 测试文件<ul><li>e2e</li><li>unit</li></ul></li><li>.babelrc // 把es6代码进行编译配置文件</li><li>.eslintrc // eslint的plugins、extends文件</li><li>.eslintignore // 忽视eslint的配置文件</li><li>.gitignore // 提交代码时忽视的文件</li><li>.postcssrc // post css配置文件</li><li>.editorconfig // 编辑器的配置文件</li><li>package.json // 项目的信息、依赖的包</li><li>index.html // 项目的首页</li><li>static // 静态数据(资源)存放，比如json数据</li></ol><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><ol><li>在vue中，所有的指令在调用的时候，都以 v- 开头</li><li>使用Vue.directive()定义全局指令 v-focus</li><li>参数1，表示指令的名称，注意指令的名称不需要加v-，在调用的时候需要加</li><li>参数2，表示指令的生命周期函数，在特定的时期会执行，执行相关的操作<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-focus /&gt;</span><br><span class="line">Vue.directive(&apos;focus&apos;, &#123;</span><br><span class="line">bind: function(el) &#123;</span><br><span class="line">// 每当指令绑定到原素身上的时候会执行这个函数，只执行一次</span><br><span class="line">// 注意，在每个函数中，第一个参数都是el，表示绑定了该指令的元素，是一个原生dom对象</span><br><span class="line">// 这时候，dom并没有绑定成功</span><br><span class="line">&#125;,</span><br><span class="line">inserted: function(el) &#123;</span><br><span class="line">// 元素已经插入到dom</span><br><span class="line">el.focus()</span><br><span class="line">&#125;,</span><br><span class="line">updated: function(el) &#123;</span><br><span class="line">// 节点更新的时候执行</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 自定义一个设置字体颜色的指令</span><br><span class="line">&lt;input v-color /&gt;</span><br><span class="line">Vue.directive(&apos;color&apos;, &#123;</span><br><span class="line">bind: function(el) &#123;</span><br><span class="line">// 只要通过指令绑定了元素，不管这个元素有没有被嵌入到页面中，这个元素肯定有了一个内联的样式</span><br><span class="line">el.style.color = &apos;red&apos;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 指令传值</span><br><span class="line">&lt;input v-color=&quot;&apos;blue&apos;&quot; /&gt;</span><br><span class="line">Vue.directive(&apos;color&apos;, &#123;</span><br><span class="line">bind: function(el, binding) &#123;</span><br><span class="line">el.style.color = binding.value</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 自定义指令</span><br><span class="line">new Vue(&#123;</span><br><span class="line">directives: &#123;</span><br><span class="line">&apos;focus&apos;: function(el) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="框架和库的区别"><a href="#框架和库的区别" class="headerlink" title="框架和库的区别"></a>框架和库的区别</h3><ol><li>框架：是一套完整的解决方案，对项目的侵入性大，如果想要更换使用另一套框架，则需要重构整个项目</li><li>库(插件)：对项目的侵入性较小，替换使用另外一个库时，不需要对项目进行较大的改动，提供某一个小功能</li></ol><h3 id="组件化和模块化的区别"><a href="#组件化和模块化的区别" class="headerlink" title="组件化和模块化的区别"></a>组件化和模块化的区别</h3><ol><li>组件化：实现代码的复用，从UI界面的角度去划分</li><li>模块化：从代码的逻辑进行划分，方便代码分层开发，保证每个功能模块的职能单一</li></ol><h3 id="vue-clamp"><a href="#vue-clamp" class="headerlink" title="vue-clamp"></a>vue-clamp</h3><ol><li>实现文本截断</li></ol><h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><ol><li>vue computed最好不要使用箭头函数</li><li>判断一个字符串是不是正则字符串：/^/.*/$/</li><li>watch中不要使用箭头函数</li><li>vue中使用element-ui，当表格数据改变之后，dom不能及时更新，需要手动刷新页面，dom才会更新，我们可以强制刷新dom<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-if=&apos;!inResize&apos;&gt;&lt;/div&gt;</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">inResize: true</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 在数据改变的地方</span><br><span class="line">this.inResize = true</span><br><span class="line">this.$nextTick(() =&gt; &#123;</span><br><span class="line">this.inResize = false</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="过滤器-1"><a href="#过滤器-1" class="headerlink" title="过滤器"></a>过滤器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 插值表达式，v-bind表达式</span><br><span class="line">2. &#123;&#123;name | nameope&#125;&#125; // 在渲染name的时候，先去执行nameope进行处理，然后把处理后的结果作为返回值，当作内容渲染</span><br><span class="line">3. Vue.filter(&apos;过滤器名称&apos;, function(data) &#123; return &#125;) // 第二个参数表示要对传递过来的参数进行什么处理</span><br><span class="line">4. 过滤器中的function的第一个参数已经被规定死了，是管道符前面的数据</span><br><span class="line">5. &#123;&#123;name | nameope(&apos;可以传递参数&apos;)&#125;&#125; </span><br><span class="line">6. &#123;&#123;name | nameope | test&#125;&#125; // 可以多个过滤器一起使用</span><br></pre></td></tr></table></figure><h3 id="私有过滤器"><a href="#私有过滤器" class="headerlink" title="私有过滤器"></a>私有过滤器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. filters: &#123;</span><br><span class="line">test: function() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">2. 过滤器调用的时候，采用的是就近原则，先看私有有没有，没有去全局找</span><br></pre></td></tr></table></figure><h3 id="main-js中注册全局过滤器"><a href="#main-js中注册全局过滤器" class="headerlink" title="main.js中注册全局过滤器"></a>main.js中注册全局过滤器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// filters &gt; index.js</span><br><span class="line">export function formatDate(date) &#123;</span><br><span class="line">  return date </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">import * as filters from &apos;./filters&apos;</span><br><span class="line">Object.keys(filters).forEach(key =&gt; &#123;</span><br><span class="line">  Vue.filter(key, filters[key])</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="组件的创建方式"><a href="#组件的创建方式" class="headerlink" title="组件的创建方式"></a>组件的创建方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 1. Vue.extend() // 创建模板属性</span><br><span class="line">const comp = Vue.extend(&#123;</span><br><span class="line">template:&apos;&lt;h3&gt;hello world&lt;/h3&gt;&apos; // 内部是要展示的html结构</span><br><span class="line">&#125;)</span><br><span class="line">// 2. Vue.component(&apos;模板名称&apos;, &apos;模板对象&apos;) // 注册</span><br><span class="line">Vue.component(&apos;test&apos;, comp)</span><br><span class="line"></span><br><span class="line">Vue.component(&apos;test2&apos;, &#123;</span><br><span class="line">template:&apos;&lt;h1&gt;这是定义组件的第二种方式&lt;/h1&gt;&apos;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 在被控制的app外面，使用template定义组件的HTML结构</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">&lt;test2&gt;&lt;/test2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;template id=&quot;comp&quot;&gt;</span><br><span class="line">&lt;h4&gt;这是定义组件的第三种方式&lt;/h4&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">Vue.component(&apos;test2&apos;, &#123;</span><br><span class="line">template:&apos;#comp&apos;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">path: &apos;upload-history/detail/:id/:status&apos;</span><br><span class="line">// 如果采用这种方式</span><br><span class="line">&lt;router-link :to=&quot;&#123;path: &apos;/configuration/upload-history/detail&apos;, query: &#123;id: scope.row.file_id, status: scope.row.status&#125;&#125;&quot;&gt;Detail&lt;/router-link&gt;</span><br><span class="line">// 此时地址栏url是</span><br><span class="line">http://172.31.212.31:9528/configuration/upload-history/detail?id=36&amp;status=4</span><br><span class="line">// 通过这种方式获取参数</span><br><span class="line">this.$route.query</span><br><span class="line">// push</span><br><span class="line">this.$router.push(&#123;</span><br><span class="line">path: &apos;&apos;,</span><br><span class="line">query: &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 如果采用这种方法</span><br><span class="line">&lt;router-link :to=&quot;&apos;/configuration/upload-history/detail/&apos; + scope.row.file_id + &apos;/&apos; + scope.row.status&quot;&gt;Detail&lt;/router-link&gt;</span><br><span class="line">// 此时url地址是</span><br><span class="line">http://172.31.212.31:9528/configuration/upload-history/detail/35/4</span><br><span class="line">// 通过这种方式获取参数</span><br><span class="line">this.$route.params</span><br></pre></td></tr></table></figure><h3 id="props、data、computed执行顺序"><a href="#props、data、computed执行顺序" class="headerlink" title="props、data、computed执行顺序"></a>props、data、computed执行顺序</h3><ol><li>computed在data之后执行，在data中调用computed取不到结果，只能得到undefined</li><li>在data中可以获取props值，也可以调用methods中的方法，拿到返回值</li><li>computed可以获取props、data、methods</li></ol><h3 id="v-for与v-if不应该混合使用"><a href="#v-for与v-if不应该混合使用" class="headerlink" title="v-for与v-if不应该混合使用"></a>v-for与v-if不应该混合使用</h3><ol><li>v-for比v-if具有更高的优先级，这样在每个循环中都会执行一次v-if，消耗性能</li><li>使用computed解决<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">language_list: []</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 不推荐</span><br><span class="line">&lt;div class=&quot;switch-language&quot; v-for=&quot;(item, index) in language_list&quot; :key=&quot;index&quot; @click.stop=&quot;switchClick&quot;&gt;</span><br><span class="line">&lt;div v-if=&quot;language === item.identify&quot;&gt;</span><br><span class="line">&lt;img :src=&quot;item.lang_img_url&quot; /&gt;</span><br><span class="line">&lt;label&gt;&#123;&#123;item.name&#125;&#125;&lt;/label&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">// 推荐</span><br><span class="line">&lt;div class=&quot;switch-language&quot; v-for=&quot;(item, index) in filterLanguageList&quot; :key=&quot;index&quot; @click.stop=&quot;switchClick&quot;&gt;</span><br><span class="line">&lt;img :src=&quot;item.lang_img_url&quot; /&gt;</span><br><span class="line">&lt;label&gt;&#123;&#123;item.name&#125;&#125;&lt;/label&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">computed: &#123;</span><br><span class="line">filterLanguageList() &#123;</span><br><span class="line">return this.language_list.filter(item =&gt; &#123;</span><br><span class="line">return item.identify === this.language1</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;说说你对SPA单页面的理解？&quot;&gt;&lt;a href=&quot;#说说你对SPA单页面的理解？&quot; class=&quot;headerlink&quot; title=&quot;说说你对SPA单页面的理解？&quot;&gt;&lt;/a&gt;说说你对SPA单页面的理解？&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;single-page-appl
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>url</title>
    <link href="http://yoursite.com/2019/10/06/url/"/>
    <id>http://yoursite.com/2019/10/06/url/</id>
    <published>2019-10-06T10:44:46.000Z</published>
    <updated>2019-10-06T10:45:31.116Z</updated>
    
    <content type="html"><![CDATA[<h3 id="输入一个url地址到网页出来发生了什么"><a href="#输入一个url地址到网页出来发生了什么" class="headerlink" title="输入一个url地址到网页出来发生了什么?"></a>输入一个url地址到网页出来发生了什么?</h3><ol><li>DNS解析<ul><li>先查看浏览器缓存有没有</li><li>如果没有查看本机hosts文件，有没有域名对应的IP地址</li><li>如果没有，查看路由器缓存有没有</li><li>如果没有，查看运营提供商有没有与之对应的IP地址</li><li>如果没有，继续查找至根域名解析服务器，从顶级域名.com开始进行递归搜索</li></ul></li><li>根据TCP协议，建立连接<ul><li>拿到IP地址后，根据TCP协议，建立连接(TCP的三次握手)</li><li>浏览器(客户端)(syn=1，用来建立连接，询问服务端，我能和你建立连接吗?我的序列号seq=x，如果同意，就回复ack=x+1)发送消息给服务端</li><li>服务端发送消息(ack=x+1,syn=1,seq=y,询问浏览器，我能和你建立连接吗?如果同意，回复ack=y+1)给客户端</li><li>浏览器发送消息(ack=y+1)给服务端，告诉说自己已经收到了</li></ul></li><li>发送请求报文<ul><li>浏览器开始发送请求报文信息</li></ul></li><li>接受响应报文<ul><li>服务端接受请求之后，发送响应报文给浏览器</li></ul></li><li>根据渲染树绘制页面<ul><li>浏览器在接受的过程中，如果遇到了不同的标记，就采用不同的方式去解析</li><li>如果遇到了HTML标记，浏览器就会采用html解析器去解析成DOM树</li><li>如果遇到了css/style/link标记，浏览器就会调用css解析器去解析为CSSOM树</li><li>如果遇到了script标记，就会调用js解析器解析执行js代码</li><li>将DOM树和CSSOM树合并为render tree(渲染树)</li><li>根据渲染树计算位置，计算出每个节点的位置信息，渲染到屏幕上</li></ul></li><li>断开连接(TCP四次挥手)<ul><li>第一次挥手，浏览器告诉服务器，我东西发送完了(请求报文)，你准备关闭吧</li><li>第二次挥手，服务器告诉浏览器，我东西接收完了(接受请求报文)我准备关闭了，你也准备吧</li><li>第三次挥手，服务器告诉浏览器，我东西发送完了(响应报文)，你准备关闭吧</li><li>第四次挥手，浏览器发送到服务器，告诉说自己东西接收(响应报文)完了，你准备关闭吧</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;输入一个url地址到网页出来发生了什么&quot;&gt;&lt;a href=&quot;#输入一个url地址到网页出来发生了什么&quot; class=&quot;headerlink&quot; title=&quot;输入一个url地址到网页出来发生了什么?&quot;&gt;&lt;/a&gt;输入一个url地址到网页出来发生了什么?&lt;/h3&gt;&lt;ol
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>react</title>
    <link href="http://yoursite.com/2019/10/06/react/"/>
    <id>http://yoursite.com/2019/10/06/react/</id>
    <published>2019-10-06T08:34:20.000Z</published>
    <updated>2019-10-06T08:34:44.028Z</updated>
    
    <content type="html"><![CDATA[<h3 id="React中keys的作用是什么"><a href="#React中keys的作用是什么" class="headerlink" title="React中keys的作用是什么?"></a>React中keys的作用是什么?</h3><ol><li>虚拟dom的唯一标识</li><li>可以提升效率</li><li>不建议使用index索引作为key，比如一个数组更新前：[1,2,3,4],索引依次是0，1，2，3</li><li>更新后数组为：[4,3,2,1],索引为0，1，2，3，这个时候react会检查每一个索引对应的值都不一样，这个时候就会把原有的删除重新创建，但是如果我们使用id作为标识，会发现这个时候只是元素的位置发生了移动，没有必要去重新删除在创建</li></ol><h3 id="React有什么特点"><a href="#React有什么特点" class="headerlink" title="React有什么特点?"></a>React有什么特点?</h3><ol><li>单向数据流</li><li>可以进行服务端渲染</li><li>使用的是虚拟DOM而不是真实DOM</li></ol><h3 id="为什么浏览器无法读取JSX"><a href="#为什么浏览器无法读取JSX" class="headerlink" title="为什么浏览器无法读取JSX?"></a>为什么浏览器无法读取JSX?</h3><ol><li>浏览器只能处理JavaScript对象，但是不能读取JS对象中的JSX</li><li>浏览器为了可以识别JSX语法，需要使用像babel这样的JSX转换器将JSX文件转为JavaScript对象，然后再将其传给浏览器</li></ol><h3 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h3><ol><li>加载阶段<ul><li>constructor</li><li>componentWillMount</li><li>render</li><li>componentDidMount</li></ul></li><li>更新阶段<ul><li>shouldComponentUpdate</li><li>componentWillUpdate</li><li>render</li><li>componentDidUpdate</li></ul></li><li>销毁阶段<ul><li>componentWillUnmount</li></ul></li><li>父组件的props属性值发生改变的时候<ul><li>componentWillReceiveProps</li></ul></li></ol><h3 id="react生命周期-16-8"><a href="#react生命周期-16-8" class="headerlink" title="react生命周期(16.8+)"></a>react生命周期(16.8+)</h3><ol><li>挂载阶段<ul><li>constructor // 初始化state</li><li>getDerevedStateFromProps // 接受到新的属性想要去修改state</li><li>render</li><li>componentDidMount</li></ul></li><li>更新阶段<ul><li>getDerivedStateFromProps // 在挂载和更新阶段都可能会调用</li><li>shouldComponentUpdate</li><li>render</li><li>getSnapsshotBeforeUpdate</li><li>componentDidUpdate</li></ul></li><li>卸载阶段<ul><li>componentWillUnmount</li></ul></li><li>注意，16.8+废弃了(并未删除)以下几个生命周期函数<ul><li>componentWillMount</li><li>componentWillReceiveProps</li><li>componentWillUpdate</li></ul></li></ol><h3 id="setState同步异步"><a href="#setState同步异步" class="headerlink" title="setState同步异步"></a>setState同步异步</h3><ol><li><p>异步</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 方法一</span><br><span class="line">setState((prvState, props) =&gt; &#123;</span><br><span class="line">// 第一个参数是修改前的state</span><br><span class="line">// 第二个参数是修改前的props</span><br><span class="line">&#125;, () =&gt; &#123;</span><br><span class="line">// 拿到执行后的最新结果</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 方法二</span><br><span class="line">setState(&#123;&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在componentDidMount中调用setState之后，还会再次调用render方法进行渲染</p></li></ol><h3 id="react组件通信"><a href="#react组件通信" class="headerlink" title="react组件通信"></a>react组件通信</h3><ol><li>父组件调用子组件方法<ul><li>在子组件中定义方法fn</li><li>在调用子组件的标签中，加入ref属性，标记为child</li><li>在父组件的方法中，通过this.refs.child.childMethods()</li></ul></li><li>兄弟<ul><li>redux</li></ul></li></ol><h3 id="redux工作流"><a href="#redux工作流" class="headerlink" title="redux工作流"></a>redux工作流</h3><ol><li>redux有以下几个部分组成<ul><li>react component</li><li>action(creators)</li><li>store</li><li>reducers</li></ul></li><li>可以这样去分析redux这几个部分<ul><li>react component去图书馆借书的人</li><li>action比做借书人说的话</li><li>store就是图书馆管理员</li><li>reducers是记录图书信息的手册</li></ul></li><li>使用流程<ul><li>先要创建store，使用createStore</li><li>createStore需要一个参数，这个参数是reducers，因此需要创建reducers，export defult (state = stateDefault, action) =&gt; {}</li><li>在组件中使用时，需要先引入store，使用getState()获取store中state的数据</li><li>如果组件本身要想触发一个action，修改store中的数据，需要在组件中创建一个action，action = {type: ‘’, data: ‘’}，通过dispatch(action)通知store</li><li>store本身不做处理，会自动把传过来的action和prevState转发到reducers上，reducer处理完毕后，把处理完成的结果也就是新的state数据返回给store</li><li>组件要想及时获取最新的state，需要订阅，store.subscribe(this.handleFunc)，当拿到新的state时会先触发this.handleFunc函数</li></ul></li></ol><h3 id="区分有状态组件和无状态组件"><a href="#区分有状态组件和无状态组件" class="headerlink" title="区分有状态组件和无状态组件"></a>区分有状态组件和无状态组件</h3><ol><li>函数方式声明的组件是静态的，是不能动的，没有状态的</li><li>使用class类定义的组件可以自定义组件状态对象 state</li><li>render方法指的是组件如何渲染，只能返回一个react元素，而且只能返回一个react元素</li></ol><h3 id="react合成事件和原生事件"><a href="#react合成事件和原生事件" class="headerlink" title="react合成事件和原生事件"></a>react合成事件和原生事件</h3><ol><li>合成事件：react并不是将click直接绑定在dom上面，而是采用事件冒泡的形式冒泡到document上面</li><li>当事件触发的时候，使用统一的事件分发处理函数dispatchEvent将指定函数执行</li></ol><h3 id="什么是受控组件和非受控组件"><a href="#什么是受控组件和非受控组件" class="headerlink" title="什么是受控组件和非受控组件"></a>什么是受控组件和非受控组件</h3><ol><li>比如 <figure class="highlight plain"><figcaption><span>value</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2. ```&lt;input /&gt;```这种没有value限制，随便输入</span><br><span class="line">3. 显然react中受控组件更好，因为react靠数据驱动，受数据控制</span><br><span class="line"></span><br><span class="line">### 什么是状态提升</span><br><span class="line">1. 在每个组件中可以通过setState修改自己组件状态，但是如何去修改其他的组件的状态?</span><br><span class="line">2. 每一个组件维护自己的state，难以修改别的组件的state</span><br><span class="line">3. 状态提升：就是将组件的状态提升到父组件中，然后组件共享父组件的状态</span><br><span class="line"></span><br><span class="line">### 高阶组件</span><br><span class="line">1. 本质上是一个函数</span><br></pre></td></tr></table></figure></li></ol><p>function HocComponent(wrappedComponent) {<br>    return class extends Component {<br>        render() {<br>            // 属性代理<br>            return &lt;wrappedComponent {…this.props} /&gt;<br>        }<br>    }<br>}</p><p>HocComponent(参数是一个组件(class)名称)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2. 提高代码复用性</span><br><span class="line">3. 通过ref获取组件实例</span><br></pre></td></tr></table></figure><p>class Text extends React.Component {<br>    say() {</p><pre><code>}render() {    return (        &lt;div&gt;hello&lt;/div&gt;    )}</code></pre><p>}<br>function HocComponent(wrappedComponent) {<br>    return class extends Component {<br>        proc(instance) {<br>            instance.say()<br>        }<br>        render() {<br>            return &lt;wrappedComponent {…this.props} ref={this.proc} /&gt;<br>        }<br>    }<br>}<br>const NewComponent = HocComponent(Text)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### ref</span><br><span class="line">1. 图片加载完后，获取图片的宽度和高度</span><br><span class="line">2. 建议这样使用</span><br></pre></td></tr></table></figure><p>componentDidMount() {<br>    // 拿到this.elem<br>}</p><div ref="{(div)" => {this.elem = div}}></div>```]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;React中keys的作用是什么&quot;&gt;&lt;a href=&quot;#React中keys的作用是什么&quot; class=&quot;headerlink&quot; title=&quot;React中keys的作用是什么?&quot;&gt;&lt;/a&gt;React中keys的作用是什么?&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;虚拟dom的
      
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>宏任务、微任务</title>
    <link href="http://yoursite.com/2019/10/06/%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%BE%AE%E4%BB%BB%E5%8A%A1/"/>
    <id>http://yoursite.com/2019/10/06/宏任务微任务/</id>
    <published>2019-10-06T07:52:59.000Z</published>
    <updated>2019-10-06T07:56:13.392Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 一道题简单谈宏任务和微任务 --&gt;</span><br><span class="line">&lt;!-- 宏任务 --&gt;</span><br><span class="line">&lt;!-- JS是单线程的，JS code在js主线程上执行的 --&gt;</span><br><span class="line">&lt;!-- 如果执行的过程中遇到了定时器，点击事件，ajax异步请求等，这个时候主线程先不执行它们，他们会进入事件队列中等待 --&gt;</span><br><span class="line">&lt;!-- 主线程执行完代码后，会立即去任务队列中查看有没有任务等待执行，如果有则会把他们提到主线程上执行 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- JS引擎规定了，setTimeout，setInterval，Ajax，click都属于宏任务 --&gt;</span><br><span class="line">&lt;!-- 规定了new Promise().then(callback)，proceed.nextTick()属于微任务 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 宏任务就是指宏任务队列中的任务 --&gt;</span><br><span class="line">&lt;!-- 微任务就是指微任务队列中的任务 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 宏任务队列不止一个，但是第一个宏任务队列只有一个任务等待主线程执行，当第一个宏任务队列全部执行完毕后，会立即查看是否存在微任务队列 --&gt;</span><br><span class="line">&lt;!-- 如果存在微任务队列，就会先把微任务队列中的任务全部执行完毕，注意微任务队列和宏任务队列有所不同，微任务队列只能有一个 --&gt;</span><br><span class="line">&lt;!-- 当微任务的任务全部执行完毕后，再去查看是否有其他的宏任务队列，如果有则继续执行 --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">console.log(&apos;start&apos;); // 1</span><br><span class="line">setTimeout(function() &#123;</span><br><span class="line">console.log(&apos;setTimeout&apos;); // 5</span><br><span class="line">&#125;, 0)</span><br><span class="line">new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">for(let i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">console.log(i); // 2</span><br><span class="line">&#125;</span><br><span class="line">resolve(&apos;resolve&apos;)</span><br><span class="line">&#125;).then(data =&gt; &#123;</span><br><span class="line">console.log(data); // 4</span><br><span class="line">&#125;)</span><br><span class="line">console.log(&apos;end&apos;); // 3</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>mobx</title>
    <link href="http://yoursite.com/2019/10/02/mobx/"/>
    <id>http://yoursite.com/2019/10/02/mobx/</id>
    <published>2019-10-02T11:45:00.000Z</published>
    <updated>2019-10-02T11:45:22.335Z</updated>
    
    <content type="html"><![CDATA[<h3 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h3><ol><li>connect()是将state装饰为props，从而使得state变化视图也变化</li></ol><h3 id="MobX"><a href="#MobX" class="headerlink" title="MobX"></a>MobX</h3><ol><li>任何事情因为state变化而变化的他就应该变化而且是自动的</li><li>npm i mobx -S, npm i mobx-react -S</li><li>我们一定要深刻理解，react中一个组件，只因为两个事情的变化而变化<ul><li>组件的state变化(必须用setState来改变state的值)</li><li>传入到组件的props变化</li></ul></li><li>react的props本身是只读的</li><li>使用了Proxy代理对象</li></ol><h3 id="使用修饰器"><a href="#使用修饰器" class="headerlink" title="使用修饰器"></a>使用修饰器</h3><ol><li><p>es6新增的语法，使用@开头</p></li><li><p>修饰一个对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  @observable a: 100</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修饰一个类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@observer</span><br><span class="line">class App extends Components &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>需要安装如下插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// babel-plugin-transform-decorators-legacy</span><br></pre></td></tr></table></figure></li><li><p>受修饰器的影响，修饰器只能修饰类，所以还得安装一个插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i babel-plugin-transform-class-properties -S</span><br></pre></td></tr></table></figure></li></ol><h3 id="observable-and-observe"><a href="#observable-and-observe" class="headerlink" title="observable and observe"></a>observable and observe</h3><ol><li>前者表示可被观察的，来自mobx，类中的属性</li><li>后者表示观察者，来自mobx-react，组件类</li><li>类必须要实例化，传入组件当作props</li></ol><h3 id="action"><a href="#action" class="headerlink" title="@action"></a>@action</h3><h3 id="computed"><a href="#computed" class="headerlink" title="@computed"></a>@computed</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;redux&quot;&gt;&lt;a href=&quot;#redux&quot; class=&quot;headerlink&quot; title=&quot;redux&quot;&gt;&lt;/a&gt;redux&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;connect()是将state装饰为props，从而使得state变化视图也变化&lt;/li&gt;
&lt;/ol&gt;
      
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="mobx" scheme="http://yoursite.com/tags/mobx/"/>
    
  </entry>
  
  <entry>
    <title>eventloop</title>
    <link href="http://yoursite.com/2019/10/01/eventloop/"/>
    <id>http://yoursite.com/2019/10/01/eventloop/</id>
    <published>2019-10-01T09:49:54.000Z</published>
    <updated>2019-10-01T09:53:25.745Z</updated>
    
    <content type="html"><![CDATA[<h3 id="event-loop"><a href="#event-loop" class="headerlink" title="event loop"></a>event loop</h3><ol><li><strong>JavaScript的代码按照队列的形式一个一个的执行，在同一时间只能执行一段代码</strong></li><li>JS是单线程的，这一点是由JS本身的用途决定的，假如当一个线程在添加dom，另一个线程去删除dom，那么此时UI线程就会懵圈了，不知道听谁的</li><li>JS作为浏览器脚本存在，负责用户交互和操作dom</li><li>JS代码如果长时间执行，会导致进程阻塞，进而冻结用户浏览器界面</li><li>JS的任务分为同步任务和异步任务</li><li>同步任务由JS主线程直接执行</li><li>异步任务JS主线程会先执行一部分，比如点击事件，等用户点击时在执行剩余部分</li><li>JS主线程会从任务队列中一个一个去执行</li></ol><h3 id="浏览器的线程机制"><a href="#浏览器的线程机制" class="headerlink" title="浏览器的线程机制"></a>浏览器的线程机制</h3><ol><li>JS执行线程：执行JS代码</li><li>UI线程：执行UI渲染，和JS执行线程互斥 </li><li>JS事件循环线程</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;event-loop&quot;&gt;&lt;a href=&quot;#event-loop&quot; class=&quot;headerlink&quot; title=&quot;event loop&quot;&gt;&lt;/a&gt;event loop&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;JavaScript的代码按照队列的形式一个一个
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>函数与变量</title>
    <link href="http://yoursite.com/2019/09/28/%E5%87%BD%E6%95%B0%E4%B8%8E%E5%8F%98%E9%87%8F/"/>
    <id>http://yoursite.com/2019/09/28/函数与变量/</id>
    <published>2019-09-28T04:16:22.000Z</published>
    <updated>2019-09-28T04:17:52.677Z</updated>
    
    <content type="html"><![CDATA[<h3 id="变量提升机制"><a href="#变量提升机制" class="headerlink" title="变量提升机制"></a>变量提升机制</h3><ol><li>JavaScript的引擎的工作方式是，先解析代码，获取所有被声明的变量，在去一行行的执行代码，这造成的结果就是所有变量的声明语句，都会被提升到代码的头部，JavaScript的这种读取变量的机制就叫做变量提升。</li><li>所有被var声明的语句都会被提升到代码的头部</li><li>如果不使用var关键字声明变量，则变量是全局变量，按照正常书写顺序去执行</li></ol><h3 id="一等公民"><a href="#一等公民" class="headerlink" title="一等公民"></a>一等公民</h3><ol><li>可以像简单值一样赋值、传参、返回</li></ol><h3 id="函数名提升"><a href="#函数名提升" class="headerlink" title="函数名提升"></a>函数名提升</h3><ol><li><p>JavaScript引擎将函数名视同变量名，所以采用function命令声明函数时，整个函数会将变量声明一样，被提升到代码头部 </p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">qiuhe(1,2)</span><br><span class="line">function qiuhe(a,b) &#123;console.log(a+b)&#125; // 3</span><br></pre></td></tr></table></figure></li><li><p>只有function声明的函数会发生函数名提升，而如果通过赋值语句写的函数则不会</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">qiuhe(1,2)</span><br><span class="line">var qiuhe = function(a,b) &#123;console.log(a+b)&#125; // qiuhe is not a function</span><br></pre></td></tr></table></figure></li></ol><h3 id="函数的作用域链"><a href="#函数的作用域链" class="headerlink" title="函数的作用域链"></a>函数的作用域链</h3><ol><li>函数的变量值的查找方式：优先在本层(所在函数的作用域)中查找，当本层中没有的时候，向上一层查找，如果找到返回，否则继续向上查找</li><li>当在全局作用域内也没有找到，则此变量没有被定义</li><li><strong>函数体</strong>的变量提升，与全局作用域一样，函数作用域内部也会产生”变量提升”现象，var命令声明的变量，不管在什么位置，变量声明都会被提升到<strong>函数体</strong>的头部</li></ol><h3 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h3><ol><li>将字符串当作语句执行</li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var str = &apos;var num = 100;&apos;;</span><br><span class="line">eval(str);</span><br><span class="line">console.log(num);</span><br></pre></td></tr></table></figure></li></ol><h3 id="instanceof类型检测"><a href="#instanceof类型检测" class="headerlink" title="instanceof类型检测"></a>instanceof类型检测</h3><ol><li>typeof用来检测基本数据类型，但是如果是引用数据类型，则需要使用instanceof操作符</li><li>instanceof用于判断一个变量是否是某个对象的实例</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;变量提升机制&quot;&gt;&lt;a href=&quot;#变量提升机制&quot; class=&quot;headerlink&quot; title=&quot;变量提升机制&quot;&gt;&lt;/a&gt;变量提升机制&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;JavaScript的引擎的工作方式是，先解析代码，获取所有被声明的变量，在去一行行的执行代码，
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>闭包</title>
    <link href="http://yoursite.com/2019/09/27/%E9%97%AD%E5%8C%85/"/>
    <id>http://yoursite.com/2019/09/27/闭包/</id>
    <published>2019-09-27T15:17:08.000Z</published>
    <updated>2019-09-27T15:18:01.965Z</updated>
    
    <content type="html"><![CDATA[<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><ol><li>获取函数的局部变量</li><li>让局部变量始终生存在内存中，避免被垃圾回收</li><li>闭包中的this都是window</li><li>不能滥用闭包，因为变量不能得到及时的释放，可能会造成内存溢出</li><li>不安全，因为在外部可以改变函数内部的局部变量值</li><li>闭包是一个能够读取函数内部变量的函数</li><li>同时，闭包也是一座桥梁–连接了函数的外部和内部</li></ol><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><ol><li>全局</li><li>函数（局部）</li><li>js语言的特殊之处在函数内部能够直接读取全局变量，反之不行</li></ol><h3 id="如何在函数外部读取函数内部变量"><a href="#如何在函数外部读取函数内部变量" class="headerlink" title="如何在函数外部读取函数内部变量"></a>如何在函数外部读取函数内部变量</h3><ol><li>不使用var声明的变量是全局变量</li><li>但是只有函数执行后才有值</li><li>一个没有返回值的函数其返回值是undefined</li></ol><h3 id="闭包demo"><a href="#闭包demo" class="headerlink" title="闭包demo"></a>闭包demo</h3><p>1.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;ul id=&quot;ul&quot;&gt;</span><br><span class="line">&lt;li&gt;aaaa&lt;/li&gt;</span><br><span class="line">&lt;li&gt;bbbb&lt;/li&gt;</span><br><span class="line">&lt;li&gt;cccc&lt;/li&gt;</span><br><span class="line">&lt;li&gt;dddd&lt;/li&gt;</span><br><span class="line">&lt;li&gt;eeee&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">var ul = document.getElementById(&apos;ul&apos;)</span><br><span class="line">for(var i = 0; i &lt; ul.children.length; i++) &#123;</span><br><span class="line">(function(i) &#123;</span><br><span class="line">ul.children[i].onclick = function() &#123;</span><br><span class="line">alert(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)(i)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">function fun(n, o) &#123;</span><br><span class="line">console.log(o)</span><br><span class="line">return &#123;</span><br><span class="line">fun: function(m) &#123;</span><br><span class="line">return fun(m, n)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// var a = fun(0)</span><br><span class="line">// a.fun(1)</span><br><span class="line">// a.fun(2)</span><br><span class="line">// a.fun(3)</span><br><span class="line"></span><br><span class="line">// var b = fun(0).fun(1).fun(2).fun(3)</span><br><span class="line"></span><br><span class="line">var c = fun(0).fun(1)</span><br><span class="line">c.fun(2)</span><br><span class="line">c.fun(3)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;闭包&quot;&gt;&lt;a href=&quot;#闭包&quot; class=&quot;headerlink&quot; title=&quot;闭包&quot;&gt;&lt;/a&gt;闭包&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;获取函数的局部变量&lt;/li&gt;
&lt;li&gt;让局部变量始终生存在内存中，避免被垃圾回收&lt;/li&gt;
&lt;li&gt;闭包中的this都是wind
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="闭包" scheme="http://yoursite.com/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>HTML</title>
    <link href="http://yoursite.com/2019/09/27/html/"/>
    <id>http://yoursite.com/2019/09/27/html/</id>
    <published>2019-09-27T12:32:00.000Z</published>
    <updated>2019-10-07T03:06:18.587Z</updated>
    
    <content type="html"><![CDATA[<h3 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h3><ol><li>trident: 1997开始在ie使用</li><li>blink:Google,2013年之前用的是webkit</li><li>webkit:safari</li><li>gecko:Firefox</li><li>presto:opera</li><li>servo:mozilla和三星达成协议,准备开发下一代浏览器内核servo</li></ol><h3 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h3><ol><li><!DCTYPOE html></li><li>主要是为了告诉浏览器采用哪种模式(或规范)解析页面</li><li>web浏览器布局引擎有三种模式:</li></ol><ul><li>怪异模式,quirks mode</li><li>混杂模式,almost standards mode,准标准模式</li><li>标准模式,full standards mode</li></ul><ol start="4"><li>如果不写dtd,浏览器就会按照自己的方式去解析页面,因为不同的浏览器有自己不同的解析方式,所以会导致同一个页面在不同浏览器出现不一致的样式,这称之为quirks mode</li><li>如果写了dtd声明,浏览器就会按照W3C的标准规范去解析页面</li><li>在IE6之前,是不存在dtd模式的,之前的布局都是采用旧的一种布局方式,在IE6之后,出现了dtd模式,此时为了兼容之前的网页,就在顶部加了<!DOCTYPE html>来区分</li></ol><h3 id="src与href"><a href="#src与href" class="headerlink" title="src与href"></a>src与href</h3><ol><li>src会替换当前元素</li><li>href会在当前文档和引用资源之间确立联系</li><li>src串行加载资源,会把指向的资源下载到当前文档内,同时会阻塞当前文档的正常渲染,例如js脚本,image,frame</li><li>href是并行加载</li></ol><h3 id="link与-import"><a href="#link与-import" class="headerlink" title="link与@import"></a>link与@import</h3><ol><li>link没有兼容性,属于xhtml与html标签,不仅可以对css引入,还可以定义rss(聚合内容),还支持使用JavaScript来操作dom控制元素样式</li><li>@import存在兼容性,在CSS2.1后引入,只是单纯的css标签,不支持js操作</li></ol><h3 id="block-formatting-context"><a href="#block-formatting-context" class="headerlink" title="block formatting context"></a>block formatting context</h3><ol><li>可以看作一个沙箱</li><li>不论内部元素如何变动均不会改变外部布局</li><li>根元素body,position:absolute/fixed,float:left/right,display:inline-block/table会触发BFC</li><li>内部盒子会垂直排列,两个盒子的间距由margin决定,但是margin会发生合并,可以设置overflow解决</li><li>BFC可以解决外边距重叠问题</li><li>BFC可以去除浮动</li></ol><h3 id="html与xhtml"><a href="#html与xhtml" class="headerlink" title="html与xhtml"></a>html与xhtml</h3><ol><li>html对开发者比较宽容,写法上没有xhtml严格</li><li>xhtml不支持标签大写,也不允许大小写混合写</li><li>xhtml标签上只允许使用双引号</li><li>xhtml不支持target=_blank,可以设置rel=”external”配合JavaScript使用</li></ol><h3 id="opacity和rgba"><a href="#opacity和rgba" class="headerlink" title="opacity和rgba()"></a>opacity和rgba()</h3><ol><li>opacity会穿透</li><li>rgba不会</li></ol><h3 id="如何让一个元素水平垂直居中"><a href="#如何让一个元素水平垂直居中" class="headerlink" title="如何让一个元素水平垂直居中"></a>如何让一个元素水平垂直居中</h3><ol><li><p>使用position:relative;position:absolute;transform:translate(-50%)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.outer-box &#123;</span><br><span class="line">width: 600px;</span><br><span class="line">height: 600px;</span><br><span class="line">border: 1px solid red;</span><br><span class="line">position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.inner-box &#123;</span><br><span class="line">width: 300px;</span><br><span class="line">height: 300px;</span><br><span class="line">border: 1px solid blue;</span><br><span class="line">position: absolute;</span><br><span class="line">top: 50%;</span><br><span class="line">left: 50%;</span><br><span class="line">transform: translate(-50%, -50%);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;outer-box&quot;&gt;</span><br><span class="line">&lt;div class=&quot;inner-box&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>使用display:flex;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.outer-box &#123;</span><br><span class="line">width: 600px;</span><br><span class="line">height: 600px;</span><br><span class="line">border: 1px solid red;</span><br><span class="line">display: flex;</span><br><span class="line">justify-content: center;</span><br><span class="line">align-items: center;</span><br><span class="line">&#125;</span><br><span class="line">.inner-box &#123;</span><br><span class="line">width: 300px;</span><br><span class="line">height: 300px;</span><br><span class="line">border: 1px solid blue;</span><br><span class="line">position: absolute;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;outer-box&quot;&gt;</span><br><span class="line">&lt;div class=&quot;inner-box&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>top:0;right:0;bottom:0;left:0;margin:auto;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.outer-box &#123;</span><br><span class="line">width: 600px;</span><br><span class="line">height: 600px;</span><br><span class="line">border: 1px solid red;</span><br><span class="line">position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.inner-box &#123;</span><br><span class="line">width: 300px;</span><br><span class="line">height: 300px;</span><br><span class="line">border: 1px solid blue;</span><br><span class="line">position: absolute;</span><br><span class="line">/* 遮罩,充满整个父级元素大小 */</span><br><span class="line">top: 0;</span><br><span class="line">right: 0;</span><br><span class="line">bottom: 0;</span><br><span class="line">left: 0;</span><br><span class="line">/* 会使得上下,左右平分剩余空间 */</span><br><span class="line">margin: auto;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;outer-box&quot;&gt;</span><br><span class="line">&lt;div class=&quot;inner-box&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>display:table-cell;text-align:center;vertical-align:middle;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.outer-box &#123;</span><br><span class="line">width: 600px;</span><br><span class="line">height: 600px;</span><br><span class="line">border: 1px solid red;</span><br><span class="line">display: table-cell;</span><br><span class="line">text-align: center;</span><br><span class="line">vertical-align: middle;</span><br><span class="line">&#125;</span><br><span class="line">.inner-box &#123;</span><br><span class="line">width: 300px;</span><br><span class="line">height: 300px;</span><br><span class="line">border: 1px solid blue;</span><br><span class="line">display: inline-block;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;outer-box&quot;&gt;</span><br><span class="line">&lt;div class=&quot;inner-box&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="H5C3"><a href="#H5C3" class="headerlink" title="H5C3"></a>H5C3</h3><ol><li>H5新特性:增强型表单控件,语义化标签,拖拽,地理定位,canvas,websocket,webworker,localstorage,音频/视频</li><li>C3新特性:rgba,text-shadow,box-shadow,border-radius,border-image,border-color,transform,transition,animation</li></ol><h3 id="说说css选择器以及这些选择器得优先级"><a href="#说说css选择器以及这些选择器得优先级" class="headerlink" title="说说css选择器以及这些选择器得优先级"></a>说说css选择器以及这些选择器得优先级</h3><ol><li>!important</li><li>内联1000</li><li>ID选择器0100</li><li>类选择器\属性选择器\伪类选择器0010</li><li>元素\关系\伪元素选择器0001</li><li>通配符0000</li></ol><h3 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h3><ol><li><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/09/29/u8eAc8.png" alt="盒模型" title>                </div>                <div class="image-caption">盒模型</div>            </figure></li><li>box-sizing: content-box; // 盒模型为内容区域的宽度和高度</li><li>box-sizing: border-box; // 盒模型为内容区域+padding+border</li></ol><h3 id="实现左侧固定-右侧自适应的布局"><a href="#实现左侧固定-右侧自适应的布局" class="headerlink" title="实现左侧固定,右侧自适应的布局"></a>实现左侧固定,右侧自适应的布局</h3><ol><li><p>利用float+margin</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">* &#123;</span><br><span class="line">margin: 0;</span><br><span class="line">padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">#box &#123;</span><br><span class="line">height: 100vh;</span><br><span class="line">&#125;</span><br><span class="line">#box &gt; div &#123;</span><br><span class="line">height: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.box-left &#123;</span><br><span class="line">width: 200px;</span><br><span class="line">background-color: #FF0000;</span><br><span class="line">float: left;</span><br><span class="line">&#125;</span><br><span class="line">.box-right &#123;</span><br><span class="line">margin-left: 200px;</span><br><span class="line">background-color: aqua;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;box&quot;&gt;</span><br><span class="line">&lt;div class=&quot;box-left&quot;&gt;</span><br><span class="line">left</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;box-right&quot;&gt;</span><br><span class="line">right</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>利用calc+float</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">* &#123;</span><br><span class="line">margin: 0;</span><br><span class="line">padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">#box &#123;</span><br><span class="line">height: 100vh;</span><br><span class="line">&#125;</span><br><span class="line">#box &gt; div &#123;</span><br><span class="line">height: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.box-left &#123;</span><br><span class="line">width: 200px;</span><br><span class="line">background-color: #FF0000;</span><br><span class="line">float: left;</span><br><span class="line">&#125;</span><br><span class="line">.box-right &#123;</span><br><span class="line">width: calc(100% - 200px);</span><br><span class="line">float: right;</span><br><span class="line">background-color: aqua;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;box&quot;&gt;</span><br><span class="line">&lt;div class=&quot;box-left&quot;&gt;</span><br><span class="line">left</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;box-right&quot;&gt;</span><br><span class="line">right</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>利用float+overflow（触发BFC）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">* &#123;</span><br><span class="line">margin: 0;</span><br><span class="line">padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">#box &#123;</span><br><span class="line">height: 100vh;</span><br><span class="line">&#125;</span><br><span class="line">#box &gt; div &#123;</span><br><span class="line">height: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.box-left &#123;</span><br><span class="line">width: 200px;</span><br><span class="line">background-color: #FF0000;</span><br><span class="line">float: left;</span><br><span class="line">&#125;</span><br><span class="line">.box-right &#123;</span><br><span class="line">overflow: hidden;</span><br><span class="line">background-color: aqua;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;box&quot;&gt;</span><br><span class="line">&lt;div class=&quot;box-left&quot;&gt;</span><br><span class="line">left</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;box-right&quot;&gt;</span><br><span class="line">right</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>display：flex；</p></li></ol><h3 id="如何避免回流与重绘"><a href="#如何避免回流与重绘" class="headerlink" title="如何避免回流与重绘"></a>如何避免回流与重绘</h3><p>1. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;浏览器内核&quot;&gt;&lt;a href=&quot;#浏览器内核&quot; class=&quot;headerlink&quot; title=&quot;浏览器内核&quot;&gt;&lt;/a&gt;浏览器内核&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;trident: 1997开始在ie使用&lt;/li&gt;
&lt;li&gt;blink:Google,2013年之前用的
      
    
    </summary>
    
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>前端模块化</title>
    <link href="http://yoursite.com/2019/09/25/module/"/>
    <id>http://yoursite.com/2019/09/25/module/</id>
    <published>2019-09-25T14:42:33.000Z</published>
    <updated>2019-09-25T14:58:50.052Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ol><li>最早的就是单纯的写代码(非常容易污染全局环境)</li><li>然后演化到了使用命名空间的形式去简单包装，但是本质上也还是对象，仍然不安全</li><li>然后演化到了使用匿名闭包(IIFE模式)</li><li>在增强到引入依赖</li></ol><h3 id="全局函数模式"><a href="#全局函数模式" class="headerlink" title="全局函数模式"></a>全局函数模式</h3><ol><li>将不同的功能封装在不同的全局函数里</li><li>非常容易覆盖，不管是函数名还是变量</li></ol><h3 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h3><ol><li>仍然可以操作对象，修改数据</li></ol><h3 id="匿名函数自调用"><a href="#匿名函数自调用" class="headerlink" title="匿名函数自调用"></a>匿名函数自调用</h3><ol><li>想让外面拿到数据，就得通过window暴露</li></ol><h3 id="IIFE"><a href="#IIFE" class="headerlink" title="IIFE"></a>IIFE</h3><ol><li>引入依赖</li><li>现代模块实现的基石<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(function(window, $) &#123;</span><br><span class="line">  let name = &apos;test&apos;</span><br><span class="line">  function foo() &#123;</span><br><span class="line">    console.log(name)</span><br><span class="line">  &#125;</span><br><span class="line">  $(&apos;body&apos;).css(&apos;background&apos;: &apos;red&apos;)</span><br><span class="line">&#125;)(window, jQuery)</span><br></pre></td></tr></table></figure></li></ol><h3 id="commonjs"><a href="#commonjs" class="headerlink" title="commonjs"></a>commonjs</h3><ol><li>nodejs就是基于这种</li><li>每一个文件都是一个模块</li><li>模块分为第三方模块和自定义模块</li><li>module.exports和exports.xxx都可以导出，但是本质上导出的是exports</li><li>在浏览器端如果需要使用commonjs需要引入browserify浏览器打包工具</li><li>执行browser js/src/index.js -o js/dist/bundle.js</li></ol><h3 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h3><ol><li>专门用在浏览器端</li><li>异步加载模块</li><li>模块分为无依赖模块和有依赖模块</li><li>需要引入require.js库</li><li>在没有引入AMD概念之前，前端js模块之间的引入十分恶心，对于错综复杂的项目依赖之间容易搞混，会导致页面上引入过多的script标签，而script标签又会导致页面请求次数过多，影响性能</li><li>jquery内置支持AMD</li></ol><h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><ol><li>依赖sea.js库</li><li>借鉴了commonJS和CMD</li><li>可以同步加载模块也可以异步加载模块</li></ol><h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><ol><li><p>export导出</p></li><li><p>import导入</p></li><li><p>在浏览器不支持es6语法的时候，需要引入babel转换工具，需要安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i babel-cli browserify -g</span><br><span class="line">npm i babel-preset-es2015 -S</span><br></pre></td></tr></table></figure></li><li><p>注意babel只能编译文件，不能新建文件夹</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;最早的就是单纯的写代码(非常容易污染全局环境)&lt;/li&gt;
&lt;li&gt;然后演化到了使用命名空间的形式去简单包装，但是本质上也还是对象
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="模块化" scheme="http://yoursite.com/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>mock</title>
    <link href="http://yoursite.com/2019/09/24/mock/"/>
    <id>http://yoursite.com/2019/09/24/mock/</id>
    <published>2019-09-24T13:10:50.000Z</published>
    <updated>2019-09-24T13:11:17.821Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ol><li>快速构建restful api，完成前后端分离开发</li></ol><h3 id="前后端分离开发方案"><a href="#前后端分离开发方案" class="headerlink" title="前后端分离开发方案"></a>前后端分离开发方案</h3><p><strong>mock</strong></p><ul><li>和后端约定好接口的标准</li><li>后端开始开发接口</li><li>前端通过假数据方式模拟一个后端接口</li></ul><h3 id="使用http-server搭建静态资源服务器、live-server"><a href="#使用http-server搭建静态资源服务器、live-server" class="headerlink" title="使用http-server搭建静态资源服务器、live-server"></a>使用http-server搭建静态资源服务器、live-server</h3><h3 id="第三方mock工具"><a href="#第三方mock工具" class="headerlink" title="第三方mock工具"></a>第三方mock工具</h3><ol><li>mock.js(无法持久化数据)</li><li>json-server</li></ol><h3 id="使用mock"><a href="#使用mock" class="headerlink" title="使用mock"></a>使用mock</h3><ol><li><a href="http://mockjs.com" target="_blank" rel="noopener">http://mockjs.com</a></li><li>引入mock.js后，会有一个全局对象Mock</li><li>Mock.mock(‘/users’, ‘get’, {hello: ‘world’})<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">  &lt;title&gt;mock&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script src=&quot;https://cdn.bootcss.com/Mock.js/1.0.1-beta3/mock.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;https://cdn.bootcss.com/jquery/3.4.1/jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    Mock.mock(&apos;/details&apos;, &apos;get&apos;,  Mock.mock(&#123;</span><br><span class="line">        &quot;name|1-10&quot;: &quot;*&quot;,</span><br><span class="line">        &quot;age|1-20&quot;: 1</span><br><span class="line">      &#125;))</span><br><span class="line">    $.get(&apos;/details&apos;, (res) =&gt; &#123;</span><br><span class="line">      console.log(&apos;res&apos;, res)</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="json-server"><a href="#json-server" class="headerlink" title="json-server"></a>json-server</h3><ol><li><a href="https://github.com/typicode/json-server" target="_blank" rel="noopener">GitHub</a></li><li>json文件中每一个名字都是一个资源</li></ol><h3 id="restful"><a href="#restful" class="headerlink" title="restful"></a>restful</h3><ol><li>面向资源编程</li><li>资源指的就是一类数据</li><li>最重要的是如何去表示一个资源(地址即资源)</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;快速构建restful api，完成前后端分离开发&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;前后端分离开发方案&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
      <category term="mock" scheme="http://yoursite.com/tags/mock/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react-hooks</title>
    <link href="http://yoursite.com/2019/09/22/react-hooks/"/>
    <id>http://yoursite.com/2019/09/22/react-hooks/</id>
    <published>2019-09-22T13:39:19.000Z</published>
    <updated>2019-09-22T13:39:48.893Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ol><li>用函数替代了类</li><li>方法即组件</li></ol><h3 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h3><ol><li>不能存在于if语句中</li><li>react自带的一个hook函数，用来声明状态变量</li><li>const [count, setCount] = useState(0)</li><li>该函数接受的参数是状态的初始值，返回一个数组，数组的第0位是当前的初始值，第1位是改变状态值的方法函数</li></ol><h3 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h3><ol><li>等于componentDidMount和componentDidUpdate</li><li>在组件挂载和更新时触发</li></ol><h3 id="组件销毁"><a href="#组件销毁" class="headerlink" title="组件销毁"></a>组件销毁</h3><ol><li>componentWillUnmount</li><li>使用useEffect，当组件销毁时执行<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function Index() &#123;</span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    console.log(&apos;组件挂载时执行&apos;)</span><br><span class="line">    return () =&gt; &#123;</span><br><span class="line">      console.log(&apos;组件卸载时执行&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  return (&lt;h1&gt;这是Index页面&lt;h1&gt;)</span><br><span class="line">&#125;</span><br><span class="line">// 但是当我们每次改变数据时，会打印console.log(&apos;组件挂载时执行&apos;)，解决办法如下：</span><br><span class="line">// 需要借助于useEffect的返回函数的第二个参数，第二个参数可以写入很多状态对应的变量，意思是当状态值发生改变时才进行解绑，但是我们如何传入一个[]作为第二个参数时，就是当组件将被销毁时才进行解绑</span><br><span class="line">function Index() &#123;</span><br><span class="line">  useEffect(()=&gt;&#123;</span><br><span class="line">      console.log(&apos;组件挂载时执行&apos;)</span><br><span class="line">      return ()=&gt;&#123;</span><br><span class="line">          console.log(&apos;组件卸载时执行&apos;)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,[])</span><br><span class="line">  return (&lt;h1&gt;这是Index页面&lt;h1&gt;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h3><ol><li>解决父子组件传值</li><li>可以实现跨层级的组件传值问题</li><li>可以访问全局状态，避免数据一层层的传递，和redux类似(状态的全局化，并且可以统一管理)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123;createContext,useContext,useState&#125; from &apos;react&apos;</span><br><span class="line"></span><br><span class="line">const CountContext = createContext()</span><br><span class="line"></span><br><span class="line">// 子组件</span><br><span class="line">function Children() &#123;</span><br><span class="line">  let count = useContext(CountContext)</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;h1&gt;这是子组件&lt;/h1&gt;</span><br><span class="line">      &lt;h3&gt;&#123;count&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Parent() &#123;</span><br><span class="line">  const [count, setCount] = useState(0)</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;h1&gt;这是parent组件&lt;/h1&gt;</span><br><span class="line">      &lt;h2&gt;次数:&#123;count&#125;&lt;/h2&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; &#123;setCount(count+1)&#125;&#125;&gt;点击使得次数增加&lt;/button&gt;</span><br><span class="line">      &lt;CountContext.Provider value=&#123;count&#125;&gt;</span><br><span class="line">        &lt;Children /&gt;</span><br><span class="line">      &lt;/CountContext.Provider&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Parent</span><br></pre></td></tr></table></figure></li></ol><h3 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h3><ol><li>通过action的传递，更新复杂逻辑的状态</li><li>控制业务逻辑<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123;useReducer&#125; from &apos;react&apos;</span><br><span class="line"></span><br><span class="line">function UseReducer() &#123;</span><br><span class="line">  const [count, dispatch] = useReducer((state, action) =&gt; &#123;</span><br><span class="line">    switch(action) &#123;</span><br><span class="line">      case &apos;add&apos;:</span><br><span class="line">        return state + 1</span><br><span class="line">        break</span><br><span class="line">      case &apos;minus&apos;:</span><br><span class="line">        return state - 1</span><br><span class="line">        break</span><br><span class="line">      default:</span><br><span class="line">        return state</span><br><span class="line">        break</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, 0)</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;h1&gt;这是第几次&#123;count&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; &#123;dispatch(&apos;add&apos;)&#125;&#125;&gt;add&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; &#123;dispatch(&apos;minus&apos;)&#125;&#125;&gt;minus&lt;/button&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default UseReducer</span><br></pre></td></tr></table></figure></li></ol><h3 id="useMemo解决子组件重复执行的问题"><a href="#useMemo解决子组件重复执行的问题" class="headerlink" title="useMemo解决子组件重复执行的问题"></a>useMemo解决子组件重复执行的问题</h3><ol><li>常常用于缓存变量<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">import React, &#123; useState &#125; from &apos;react&apos;;</span><br><span class="line">import UseMemoChild from &apos;./useMemoChild&apos;</span><br><span class="line"></span><br><span class="line">function UseMemo() &#123;</span><br><span class="line">  const [A, setA] = useState(&apos;这是A&apos;)</span><br><span class="line">  const [B, setB] = useState(&apos;这是B&apos;)</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;h1&gt;这是父组件&lt;/h1&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; &#123;setA(new Date().getTime()+&apos;点击了A&apos;)&#125;&#125;&gt;点击A&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; &#123;setB(new Date().valueOf()+&apos;点击了B&apos;)&#125;&#125;&gt;点击B&lt;/button&gt;</span><br><span class="line">      &lt;UseMemoChild isA=&#123;A&#125; &gt;&#123;B&#125;&lt;/UseMemoChild&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default UseMemo</span><br><span class="line"></span><br><span class="line">// 子组件</span><br><span class="line">import React, &#123;useMemo&#125; from &apos;react&apos;;</span><br><span class="line"></span><br><span class="line">function UseMemoChild(&#123;isA, children&#125;) &#123;</span><br><span class="line">  function handleAMethods(isA) &#123;</span><br><span class="line">    console.log(`执行了A的处理方法:$&#123;isA&#125;`)</span><br><span class="line">    return `执行了A的处理方法:$&#123;isA&#125;`</span><br><span class="line">  &#125;</span><br><span class="line">  // 优化前</span><br><span class="line">  // const handleA = handleAMethods(isA)</span><br><span class="line"></span><br><span class="line">  // 优化后</span><br><span class="line">  const handleA = useMemo(() =&gt; &#123;</span><br><span class="line">    return handleAMethods(isA)</span><br><span class="line">  &#125;, [isA])</span><br><span class="line">  </span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;h2&gt;这是子组件页面&lt;/h2&gt;</span><br><span class="line">      &lt;h3&gt;接收到父组件数据A：&#123;handleA&#125;&lt;/h3&gt;</span><br><span class="line">      &lt;h3&gt;接收到父组件数据B：&#123;children&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default UseMemoChild</span><br></pre></td></tr></table></figure></li></ol><h3 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h3><ol><li>获取dom元素</li><li>一般不推荐此操作</li></ol><h3 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h3><ol><li>缓存方法</li><li>提升性能，避免不必要的问题出现</li></ol><h3 id="优化react-hooks程序性能"><a href="#优化react-hooks程序性能" class="headerlink" title="优化react hooks程序性能"></a>优化react hooks程序性能</h3><ol><li>使用function的形式编写组件，使得我们丢了shouldComponentUpdate这个生命周期函数</li><li>也就是我们没有办法在组件更新之前去控制这个组件是不是要重新渲染</li><li>在函数组件中，也没有了mount和update两个状态，这意味着函数组件的每一次执行都会执行内部的所有逻辑，就带来了非常大的性能损耗</li><li>使用useMemo和useCallback就可以解决这个性能问题</li></ol><h3 id="自定义hooks函数"><a href="#自定义hooks函数" class="headerlink" title="自定义hooks函数"></a>自定义hooks函数</h3><ol><li>自定义的hooks函数偏向于功能</li><li>组件偏向于界面和业务逻辑的实现</li><li>往往使用use开头命名，这样才能更好的区分组件和自定义hooks函数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123;useState, useEffect, useCallback&#125; from &apos;react&apos;;</span><br><span class="line">function useWinSize() &#123;</span><br><span class="line">  const [size, setSize] = useState(&#123;</span><br><span class="line">    width: document.documentElement.clientWidth,</span><br><span class="line">    height: document.documentElement.clientHeight</span><br><span class="line">  &#125;)</span><br><span class="line">  const onResize = useCallback(() =&gt; &#123;</span><br><span class="line">    setSize(&#123;</span><br><span class="line">      width: document.documentElement.clientWidth,</span><br><span class="line">      height: document.documentElement.clientHeight</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    window.addEventListener(&apos;resize&apos;, onResize)</span><br><span class="line">    return () =&gt; &#123;</span><br><span class="line">      window.removeEventListener(&apos;resize&apos;, onResize)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [])</span><br><span class="line">  return size</span><br><span class="line">&#125;</span><br><span class="line">function Hooks() &#123;</span><br><span class="line">  const size = useWinSize()</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;h1&gt;当前的浏览器的尺寸大小是: &#123;size.width&#125; x &#123;size.height&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">export default Hooks</span><br></pre></td></tr></table></figure></li></ol><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">// index.js</span><br><span class="line">import React from &apos;react&apos;</span><br><span class="line">import Info from &apos;./info&apos;</span><br><span class="line">import Buttons from &apos;./buttons&apos;</span><br><span class="line">import &#123;Color&#125; from &apos;./color&apos;</span><br><span class="line">function Home() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;Color&gt;</span><br><span class="line">        &lt;Info&gt;&lt;/Info&gt;</span><br><span class="line">        &lt;Buttons&gt;&lt;/Buttons&gt;</span><br><span class="line">      &lt;/Color&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">export default Home</span><br><span class="line"></span><br><span class="line">// info.js</span><br><span class="line">import React, &#123;useContext&#125; from &apos;react&apos;</span><br><span class="line">import &#123;ColorContext&#125; from &apos;./color&apos;</span><br><span class="line">function Info() &#123;</span><br><span class="line">  const &#123;color&#125; = useContext(ColorContext)</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;h1 style=&#123;&#123;color&#125;&#125;&gt;当前的颜色是&#123;color&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">export default Info</span><br><span class="line"></span><br><span class="line">// buttons.js</span><br><span class="line">import React, &#123;useContext&#125; from &apos;react&apos;</span><br><span class="line">import &#123;UPDATE_COLOR, ColorContext&#125; from &apos;./color&apos;</span><br><span class="line">function Buttons() &#123;</span><br><span class="line">  // dispatch是在共享状态里面的</span><br><span class="line">  const &#123;dispatch&#125; = useContext(ColorContext)</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; &#123;dispatch(&#123;type: UPDATE_COLOR, color: &apos;red&apos;&#125;)&#125;&#125;&gt;点击变为红色&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; &#123;dispatch(&#123;type: UPDATE_COLOR, color: &apos;blue&apos;&#125;)&#125;&#125;&gt;点击变为蓝色&lt;/button&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">export default Buttons</span><br><span class="line"></span><br><span class="line">// data.js</span><br><span class="line">import React, &#123;createContext, useReducer&#125; from &apos;react&apos;</span><br><span class="line">// 数据共享</span><br><span class="line">export const ColorContext = createContext(&#123;&#125;)</span><br><span class="line">export const UPDATE_COLOR = &apos;update_color&apos;</span><br><span class="line">function reducer(state, action) &#123;</span><br><span class="line">  switch(action.type) &#123;</span><br><span class="line">    case UPDATE_COLOR:</span><br><span class="line">      return action.color</span><br><span class="line">    default:</span><br><span class="line">      return state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">export const Color = (props) =&gt; &#123;</span><br><span class="line">  const [color, dispatch] = useReducer(reducer, &apos;blue&apos;)</span><br><span class="line">  return (</span><br><span class="line">    &lt;ColorContext.Provider value=&#123;&#123;color, dispatch&#125;&#125;&gt;</span><br><span class="line">    &#123;/* 保证内部所有的组件都可以使用传递的值 */&#125;</span><br><span class="line">      &#123;props.children&#125;</span><br><span class="line">    &lt;/ColorContext.Provider&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;用函数替代了类&lt;/li&gt;
&lt;li&gt;方法即组件&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;useState&quot;&gt;&lt;a href=&quot;#us
      
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="react-hooks" scheme="http://yoursite.com/tags/react-hooks/"/>
    
  </entry>
  
  <entry>
    <title>react-next</title>
    <link href="http://yoursite.com/2019/09/21/react-next/"/>
    <id>http://yoursite.com/2019/09/21/react-next/</id>
    <published>2019-09-21T01:25:45.000Z</published>
    <updated>2019-09-21T01:27:32.138Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SPA"><a href="#SPA" class="headerlink" title="SPA"></a>SPA</h3><ol><li>单一页面ian，首屏加载过慢</li><li>不能seo(对seo不友好)</li></ol><h3 id="next-js"><a href="#next-js" class="headerlink" title="next.js"></a>next.js</h3><ol><li>SSR</li><li>服务端渲染</li><li>自带数据同步</li><li>带有丰富的插件(自己形成了生态)</li><li>配置灵活</li></ol><h3 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h3><p><strong>方式一</strong></p><ol><li>create-next-app</li><li>npx create-next-app demo</li></ol><p><strong>方式二</strong></p><ol><li>yarn add react react-dom next</li><li>脚本命令配置:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;dev&quot;: &quot;next&quot;,</span><br><span class="line">&quot;build&quot;: &quot;next build&quot;,</span><br><span class="line">&quot;start&quot;: &quot;next start&quot;</span><br></pre></td></tr></table></figure></li></ol><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><ol><li>会根据在pages下面写的路径来自动生成路由</li><li>Link标签控制跳转</li><li>Router.push 编程式跳转</li></ol><h3 id="使用query传递参数以及参数的接收"><a href="#使用query传递参数以及参数的接收" class="headerlink" title="使用query传递参数以及参数的接收"></a>使用query传递参数以及参数的接收</h3><ol><li>import {withRouter} from ‘next/router’</li><li>router.query.arg</li></ol><h3 id="路由的钩子事件"><a href="#路由的钩子事件" class="headerlink" title="路由的钩子事件"></a>路由的钩子事件</h3><ol><li>绑定事件：Router.events.on(‘routeChangeStart’, (…arg) =&gt; {<br>console.log(..arg)<br>})</li><li>routeChangeStart</li><li>routeChangeComplete</li><li>beforeHistoryChange</li><li>routeChangeError</li><li>hashChangeStart</li><li>hashChangeComplete</li></ol><h3 id="使用axios获取数据"><a href="#使用axios获取数据" class="headerlink" title="使用axios获取数据"></a>使用axios获取数据</h3><ol><li>只能在getInitialProps里面进行数据请求、</li><li>使用easy-mock模拟数据<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import Link from &apos;next/link&apos;</span><br><span class="line">import &#123;withRouter&#125; from &apos;next/router&apos;</span><br><span class="line">import axios from &apos;axios&apos;</span><br><span class="line">const Test = (&#123;router, list&#125;) =&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;h1&gt;这是test页面&lt;/h1&gt;</span><br><span class="line">      &lt;h2&gt;&#123;router.query.name&#125;&lt;/h2&gt;</span><br><span class="line">      &lt;h3&gt;&#123;list&#125;&lt;/h3&gt;</span><br><span class="line">      &lt;Link href=&apos;/index&apos;&gt;</span><br><span class="line">        &lt;a&gt;回到首页&lt;/a&gt;</span><br><span class="line">      &lt;/Link&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">Test.getInitialProps = async () =&gt; &#123;</span><br><span class="line">  const promise = new Promise(resolve =&gt; &#123;</span><br><span class="line">    axios(&apos;https://www.easy-mock.com/mock/5cfcce489dc7c36bd6da2c99/xiaojiejie/getList&apos;).then(res =&gt; &#123;</span><br><span class="line">      console.log(res)</span><br><span class="line">      resolve(res.data.data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  return await promise</span><br><span class="line">&#125;</span><br><span class="line">export default withRouter(Test)</span><br></pre></td></tr></table></figure></li></ol><h3 id="如何编写样式"><a href="#如何编写样式" class="headerlink" title="如何编写样式"></a>如何编写样式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import &#123;useState&#125; from &apos;react&apos;</span><br><span class="line">function TestColor() &#123;</span><br><span class="line">  const [color, setColor] = useState(&apos;blue&apos;)</span><br><span class="line">  const changeColor = () =&gt; &#123;</span><br><span class="line">    setColor(color == &apos;blue&apos; ? &apos;red&apos; : &apos;blue&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;div className=&apos;blue&apos; onClick=&#123;changeColor&#125;&gt;这是蓝色&lt;/div&gt;</span><br><span class="line">      &lt;style jsx&gt;</span><br><span class="line">        &#123;</span><br><span class="line">          `</span><br><span class="line">            .blue &#123;</span><br><span class="line">              color: $&#123;color&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">          `</span><br><span class="line">        &#125;</span><br><span class="line">      &lt;/style&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">export default TestColor</span><br></pre></td></tr></table></figure><h3 id="模块懒加载"><a href="#模块懒加载" class="headerlink" title="模块懒加载"></a>模块懒加载</h3><p>一. 外部模块懒加载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const changeTime = async () =&gt; &#123;</span><br><span class="line">  const moment = await import(&apos;moment&apos;)</span><br><span class="line">  setTime(moment.default(Date.now()).format())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二. 自定义组件懒加载</p><ol><li>import dynamic from ‘next/dynamic’</li><li>const Com = dynamic(import(‘./components/com’))</li></ol><h3 id="利于SEO"><a href="#利于SEO" class="headerlink" title="利于SEO"></a>利于SEO</h3><ol><li>import Head from ‘next/head’</li><li><head><meta name="generator" content="Hexo 3.9.0"><title></title><meta></head></li></ol><h3 id="next中引入css"><a href="#next中引入css" class="headerlink" title="next中引入css"></a>next中引入css</h3><ol><li>yarn add @zeit/next-css</li><li>新建next.config.js<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const withCss = require(&apos;@zeit/next-css&apos;)</span><br><span class="line">if(typeof require !== &apos;undefined&apos;) &#123;</span><br><span class="line">  require.extensions[&apos;.css&apos;] = file =&gt; &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">module.exports = withCss(&#123;&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="next使用antd"><a href="#next使用antd" class="headerlink" title="next使用antd"></a>next使用antd</h3><ol><li><p>yarn add antd</p></li><li><p>yarn add babel-plugin-import 按需加载</p></li><li><p>安装完成后，在项目根目录建立.babelrc文件，然后写入如下配置文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;presets&quot;:[&quot;next/babel&quot;],  //Next.js的总配置文件，相当于继承了它本身的所有配置</span><br><span class="line">    &quot;plugins&quot;:[     //增加新的插件，这个插件就是让antd可以按需引入，包括CSS</span><br><span class="line">        [</span><br><span class="line">            &quot;import&quot;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;libraryName&quot;:&quot;antd&quot;,</span><br><span class="line">                &quot;style&quot;:&quot;css&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这样配置好了以后，webpack就不会默认把整个Ant Design的包都进行打包到生产环境了，而是我们使用那个组件就打包那个组件,同样CSS也是按需打包的。</p></li></ol><h3 id="next打包"><a href="#next打包" class="headerlink" title="next打包"></a>next打包</h3><ol><li>其实Next.js大打包时非常简单的，只要一个命令就可以打包成功。但是当你使用了Ant Desgin后，在打包的时候会遇到一些坑。</li><li>在page目录下，新建一个_app.js文件，然后写入下面的代码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import App from &apos;next/app&apos;</span><br><span class="line">import &apos;antd/dist/antd.css&apos;</span><br><span class="line">export default App</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;SPA&quot;&gt;&lt;a href=&quot;#SPA&quot; class=&quot;headerlink&quot; title=&quot;SPA&quot;&gt;&lt;/a&gt;SPA&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;单一页面ian，首屏加载过慢&lt;/li&gt;
&lt;li&gt;不能seo(对seo不友好)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;ne
      
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="react-next" scheme="http://yoursite.com/tags/react-next/"/>
    
  </entry>
  
  <entry>
    <title>fabric</title>
    <link href="http://yoursite.com/2019/09/18/fabric/"/>
    <id>http://yoursite.com/2019/09/18/fabric/</id>
    <published>2019-09-18T14:23:35.000Z</published>
    <updated>2019-09-18T14:29:15.862Z</updated>
    
    <content type="html"><![CDATA[<h3 id="初始fabric"><a href="#初始fabric" class="headerlink" title="初始fabric"></a>初始fabric</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;canvas id=&quot;can&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">  &lt;script src=&quot;https://cdn.bootcss.com/fabric.js/3.4.0/fabric.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var canvas = new fabric.Canvas(&apos;can&apos;)</span><br><span class="line">    var rect = new fabric.Rect(&#123;</span><br><span class="line">      left: 100,</span><br><span class="line">      top: 100,</span><br><span class="line">      fill: &apos;red&apos;,</span><br><span class="line">      width: 100,</span><br><span class="line">      height: 80</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    canvas.add(rect)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="画不规则图形"><a href="#画不规则图形" class="headerlink" title="画不规则图形"></a>画不规则图形</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;canvas id=&quot;canvas&quot; width=&quot;800&quot; height=&quot;800&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">  &lt;script src=&quot;./fabric/fabric.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var canvas = new fabric.Canvas(&apos;canvas&apos;)</span><br><span class="line"></span><br><span class="line">    var path = new fabric.Path(&apos;M 0 0 L 200 100 L 170 200 z&apos;)</span><br><span class="line"></span><br><span class="line">    path.set(&#123;</span><br><span class="line">      left: 200,</span><br><span class="line">      top: 300,</span><br><span class="line">      fill: &apos;blue&apos;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    canvas.add(path)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="画圆"><a href="#画圆" class="headerlink" title="画圆"></a>画圆</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;canvas id=&quot;canvas&quot; width=&quot;800&quot; height=&quot;800&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">  &lt;script src=&quot;./fabric/fabric.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var canvas = new fabric.Canvas(&apos;canvas&apos;)</span><br><span class="line"></span><br><span class="line">    var circle = new fabric.Circle(&#123;</span><br><span class="line">      left: 100,</span><br><span class="line">      top: 100,</span><br><span class="line">      radius: 50,</span><br><span class="line">      strokWidth: 1,</span><br><span class="line">      stroke: &apos;red&apos;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    canvas.add(circle)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="渐变圆"><a href="#渐变圆" class="headerlink" title="渐变圆"></a>渐变圆</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;canvas id=&quot;canvas&quot; width=&quot;800&quot; height=&quot;800&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">  &lt;script src=&quot;./fabric/fabric.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var canvas = new fabric.Canvas(&apos;canvas&apos;)</span><br><span class="line"></span><br><span class="line">    var circle = new fabric.Circle(&#123;</span><br><span class="line">      left: 100,</span><br><span class="line">      top: 100,</span><br><span class="line">      radius: 50,</span><br><span class="line">      strokWidth: 1,</span><br><span class="line">      stroke: &apos;red&apos;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // 从上到下渐变</span><br><span class="line">    // circle.setGradient(&apos;fill&apos;, &#123;</span><br><span class="line">    //   x1: 0,</span><br><span class="line">    //   y1: 0,</span><br><span class="line">    //   x2: 0,</span><br><span class="line">    //   y2: circle.height,</span><br><span class="line">    //   colorStops: &#123;</span><br><span class="line">    //     0: &apos;#f00&apos;,</span><br><span class="line">    //     1: &apos;#ccc&apos;</span><br><span class="line">    //   &#125;</span><br><span class="line">    // &#125;)</span><br><span class="line"></span><br><span class="line">    // 从左到右渐变</span><br><span class="line">    circle.setGradient(&apos;fill&apos;, &#123;</span><br><span class="line">      x1: 0,</span><br><span class="line">      y1: 0,</span><br><span class="line">      x2: circle.width,</span><br><span class="line">      y2: 0,</span><br><span class="line">      colorStops: &#123;</span><br><span class="line">        0: &apos;#00f&apos;,</span><br><span class="line">        1: &apos;#0f0&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    canvas.add(circle)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="让图形动起来"><a href="#让图形动起来" class="headerlink" title="让图形动起来"></a>让图形动起来</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;canvas id=&quot;canvas&quot; width=&quot;800&quot; height=&quot;800&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">  &lt;script src=&quot;./fabric/fabric.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var canvas = new fabric.Canvas(&apos;canvas&apos;)</span><br><span class="line"></span><br><span class="line">    var rect = new fabric.Rect(&#123;</span><br><span class="line">      top: 100,</span><br><span class="line">      left: 200,</span><br><span class="line">      width: 200,</span><br><span class="line">      height: 80,</span><br><span class="line">      fill: &apos;red&apos;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    rect.animate(&apos;left&apos;, 500, &#123;</span><br><span class="line">      onChange: canvas.renderAll.bind(canvas),</span><br><span class="line">      duration: 2000,</span><br><span class="line">      easing: fabric.util.ease.easeOutBounce</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    canvas.add(rect)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;canvas id=&quot;canvas&quot; width=&quot;800&quot; height=&quot;800&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">  &lt;script src=&quot;./fabric/fabric.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var canvas = new fabric.Canvas(&apos;canvas&apos;)</span><br><span class="line"></span><br><span class="line">    // mouse: down ,move, up, after:render 画布重新渲染执行， selected</span><br><span class="line"></span><br><span class="line">    var rect = new fabric.Rect(&#123;</span><br><span class="line">      left: 100,</span><br><span class="line">      top: 100,</span><br><span class="line">      width: 100,</span><br><span class="line">      height: 200,</span><br><span class="line">      fill: &apos;red&apos;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    rect.on(&apos;selected&apos;, function(options) &#123;</span><br><span class="line">      console.log(&apos;选择了圆形&apos;, options)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    canvas.add(rect)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="图像过滤器"><a href="#图像过滤器" class="headerlink" title="图像过滤器"></a>图像过滤器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;canvas id=&quot;canvas&quot; width=&quot;800&quot; height=&quot;800&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">  &lt;script src=&quot;./fabric/fabric.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var canvas = new fabric.Canvas(&apos;canvas&apos;)</span><br><span class="line"></span><br><span class="line">    fabric.Image.fromURL(&apos;./lion.jpg&apos;, function(img) &#123;</span><br><span class="line">      var filter = new fabric.Image.filters.Brightness(&#123;</span><br><span class="line">        brightness: 0.1</span><br><span class="line">      &#125;);</span><br><span class="line">      var sepia = new fabric.Image.filters.Sepia()</span><br><span class="line">      // 增加过滤器效果</span><br><span class="line">      img.filters.push(</span><br><span class="line">        filter,</span><br><span class="line">        sepia</span><br><span class="line">      )</span><br><span class="line">      // new fabric.Image.filters.Brightness(&#123;brightness: 10&#125;)</span><br><span class="line">      // 应用过滤器 canvas.renderAll.bind(canvas)</span><br><span class="line">      img.applyFilters()</span><br><span class="line"></span><br><span class="line">      canvas.add(img)</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="文本编辑"><a href="#文本编辑" class="headerlink" title="文本编辑"></a>文本编辑</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;canvas id=&quot;canvas&quot; width=&quot;800&quot; height=&quot;800&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">  &lt;script src=&quot;./fabric/fabric.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var canvas = new fabric.Canvas(&apos;canvas&apos;)</span><br><span class="line"></span><br><span class="line">    var text = new fabric.Text(&apos;hello world, 2019-09-18&apos;, &#123;</span><br><span class="line">      left: 100,</span><br><span class="line">      top: 100,</span><br><span class="line">      fontFamily: &apos;Comic Sans&apos;,</span><br><span class="line">      fontSize: 20</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    canvas.add(text)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="颜色转换"><a href="#颜色转换" class="headerlink" title="颜色转换"></a>颜色转换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;canvas id=&quot;canvas&quot; width=&quot;800&quot; height=&quot;800&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">  &lt;script src=&quot;./fabric/fabric.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var canvas = new fabric.Canvas(&apos;canvas&apos;)</span><br><span class="line"></span><br><span class="line">    var color1 = new fabric.Color(&apos;#f00&apos;)</span><br><span class="line"></span><br><span class="line">    var color2 = new fabric.Color(&apos;#ccc&apos;)</span><br><span class="line"></span><br><span class="line">    var color3 = new fabric.Color(&apos;rgb(123,123,123)&apos;)</span><br><span class="line"></span><br><span class="line">    var color4 = new fabric.Color(&apos;#999&apos;)</span><br><span class="line"></span><br><span class="line">    console.log(color1.toRgb()) // 转成rgb</span><br><span class="line"></span><br><span class="line">    console.log(color3.toHex()) // 转成16进制</span><br><span class="line"></span><br><span class="line">    var color5 = color2.overlayWith(color4).toHex()</span><br><span class="line"></span><br><span class="line">    console.log(color5)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="正方形、圆形、三角形"><a href="#正方形、圆形、三角形" class="headerlink" title="正方形、圆形、三角形"></a>正方形、圆形、三角形</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">      background-color: #ccc;</span><br><span class="line">    &#125;</span><br><span class="line">    #can &#123;</span><br><span class="line">      background-color: #fff;</span><br><span class="line">      border: 1px solid red;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;canvas width=&quot;800&quot; height=&quot;800&quot; id=&quot;can&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">  &lt;script src=&quot;./fabric/fabric.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var canvas = new fabric.Canvas(&apos;can&apos;)</span><br><span class="line"></span><br><span class="line">    var rect = new fabric.Rect(&#123;</span><br><span class="line">      left: 100,</span><br><span class="line">      top: 100,</span><br><span class="line">      fill: &apos;pink&apos;,</span><br><span class="line">      width: 100,</span><br><span class="line">      height: 100</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    var circle = new fabric.Circle(&#123;</span><br><span class="line">      radius: 60,</span><br><span class="line">      left: 200,</span><br><span class="line">      top: 200,</span><br><span class="line">      fill: &apos;blue&apos;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    var triangle = new fabric.Triangle(&#123;</span><br><span class="line">      left: 300,</span><br><span class="line">      top: 300,</span><br><span class="line">      fill: &apos;purple&apos;,</span><br><span class="line">      width: 100,</span><br><span class="line">      height: 150</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    canvas.add(rect)</span><br><span class="line"></span><br><span class="line">    canvas.add(circle)</span><br><span class="line"></span><br><span class="line">    canvas.add(triangle)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="canvas插入图片-上"><a href="#canvas插入图片-上" class="headerlink" title="canvas插入图片-上"></a>canvas插入图片-上</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">      background-color: #ccc;</span><br><span class="line">    &#125;</span><br><span class="line">    #canvas &#123;</span><br><span class="line">      background-color: #fff;</span><br><span class="line">      border: 1px solid red;</span><br><span class="line">    &#125;</span><br><span class="line">    #code &#123;</span><br><span class="line">      display: none;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;canvas id=&quot;canvas&quot; width=&quot;800&quot; height=&quot;800&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">  &lt;img src=&quot;./code.jpg&quot; id=&quot;code&quot; alt=&quot;&quot;&gt;</span><br><span class="line">  &lt;script src=&quot;./fabric/fabric.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var canvas = new fabric.Canvas(&apos;canvas&apos;)</span><br><span class="line">    var code = document.getElementById(&apos;code&apos;)</span><br><span class="line"></span><br><span class="line">    var img = new fabric.Image(code, &#123;</span><br><span class="line">      left: 100,</span><br><span class="line">      top: 200,</span><br><span class="line">      width: 100,</span><br><span class="line">      height: 100</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    canvas.add(img)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="canvas插入图片-下"><a href="#canvas插入图片-下" class="headerlink" title="canvas插入图片-下"></a>canvas插入图片-下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">      background-color: #ccc;</span><br><span class="line">    &#125;</span><br><span class="line">    #canvas &#123;</span><br><span class="line">      background-color: #fff;</span><br><span class="line">      border: 1px solid red;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;canvas id=&quot;canvas&quot; width=&quot;800&quot; height=&quot;800&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">  &lt;script src=&quot;./fabric/fabric.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var canvas = new fabric.Canvas(&apos;canvas&apos;)</span><br><span class="line"></span><br><span class="line">    fabric.Image.fromURL(&apos;./code.jpg&apos;, function(oimg) &#123;</span><br><span class="line">        oimg.scale(0.6)</span><br><span class="line">        oimg.left = 100</span><br><span class="line">        oimg.top = 200</span><br><span class="line">        canvas.add(oimg)</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;初始fabric&quot;&gt;&lt;a href=&quot;#初始fabric&quot; class=&quot;headerlink&quot; title=&quot;初始fabric&quot;&gt;&lt;/a&gt;初始fabric&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
    
      <category term="canvas" scheme="http://yoursite.com/tags/canvas/"/>
    
      <category term="fabric" scheme="http://yoursite.com/tags/fabric/"/>
    
  </entry>
  
  <entry>
    <title>nuxt</title>
    <link href="http://yoursite.com/2019/09/13/nuxt/"/>
    <id>http://yoursite.com/2019/09/13/nuxt/</id>
    <published>2019-09-13T02:04:25.000Z</published>
    <updated>2019-09-13T05:19:01.052Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ol><li>一个通用的vue框架</li><li>常用来做ssr</li><li>ssr：在服务器端把vue的文件直接渲染为html返回给浏览器</li><li>对seo支持的非常好，比spa打开速度快一点</li><li>spa对seo是不友好的</li><li>新闻、博客、电影(需要搜索引擎提供流量的这种站点)这种网站必须要用ssr</li></ol><h3 id="什么是服务端渲染"><a href="#什么是服务端渲染" class="headerlink" title="什么是服务端渲染?"></a>什么是服务端渲染?</h3><p><em>后端先读取数据库，拿到数据，将数据和页面进行拼装成html文件，最后将完整的html页面返回给浏览器</em></p><h3 id="什么是客户端渲染"><a href="#什么是客户端渲染" class="headerlink" title="什么是客户端渲染?"></a>什么是客户端渲染?</h3><p><em>数据由浏览器通过ajax向后台拿到数据，通过js将数据填充到dom元素上最终展示到网页中</em></p><h3 id="前后端渲染对比"><a href="#前后端渲染对比" class="headerlink" title="前后端渲染对比"></a>前后端渲染对比</h3><ol><li>服务端渲染会消耗更多的服务端资源(CPU、内存)</li><li>客户端渲染可以将静态资源部署到cdn上，实现高并发</li><li>服务端渲染对seo更好(因为seo不能分析js文件，只能分析html结构的文件)</li></ol><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><ol><li>npx create-nuxt-app projectName</li><li>npm run dev 开启项目</li></ol><h3 id="目录结构和配置文件"><a href="#目录结构和配置文件" class="headerlink" title="目录结构和配置文件"></a>目录结构和配置文件</h3><h3 id="基本标签"><a href="#基本标签" class="headerlink" title="基本标签"></a>基本标签</h3><ol><li>nuxt-link</li><li>_是动态路由的标志</li></ol><h3 id="默认模板"><a href="#默认模板" class="headerlink" title="默认模板"></a>默认模板</h3><ol><li>app.html</li><li>这样在每一个页面上都会引入app.html的内容</li></ol><h3 id="默认布局"><a href="#默认布局" class="headerlink" title="默认布局"></a>默认布局</h3><h3 id="异步请求"><a href="#异步请求" class="headerlink" title="异步请求"></a>异步请求</h3><ol><li>asyncData</li><li>asyncData() {<br>return axios.get(url).then(res =&gt; {info: res.data}) // 自动把info写入到data中<br>}</li><li>async asyncData() {<br>let {data} = await axios get(url)<br>return {info: data}<br>}</li></ol><h3 id="静态资源文件引用和打包生产"><a href="#静态资源文件引用和打包生产" class="headerlink" title="静态资源文件引用和打包生产"></a>静态资源文件引用和打包生产</h3><ol><li>~</li><li>npm run generate // 打包</li><li>安装npm i -g live-server</li><li>输入live-server启动</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;一个通用的vue框架&lt;/li&gt;
&lt;li&gt;常用来做ssr&lt;/li&gt;
&lt;li&gt;ssr：在服务器端把vue的文件直接渲染为html返回
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="nuxt" scheme="http://yoursite.com/tags/nuxt/"/>
    
  </entry>
  
  <entry>
    <title>web安全</title>
    <link href="http://yoursite.com/2019/09/03/web%E5%AE%89%E5%85%A8/"/>
    <id>http://yoursite.com/2019/09/03/web安全/</id>
    <published>2019-09-03T13:51:12.000Z</published>
    <updated>2019-09-03T15:55:38.836Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常见web攻击方式"><a href="#常见web攻击方式" class="headerlink" title="常见web攻击方式"></a>常见web攻击方式</h3><ol><li>XSS-反射型</li></ol><ul><li>跨站脚本攻击</li><li>反射型xss(恶意的url)，一次性的，由用户发起</li><li>chrome内置了一些xss过滤器，可以防止大部分反射型xss攻击</li><li>firefox安全性不如chrome</li><li>特点：用户手动触发，危害小，不持久</li></ul><ol start="2"><li>XSS-存储型</li></ol><ul><li>黑客将恶意脚本代码上传(比如通过评论，存入到对方服务器)</li><li>当客户端重新使用数据时，服务器会返回恶意代码，再次执行</li><li>特点时持久，不需要用户触发，危害更大</li></ul><ol start="3"><li>DOM-base XSS</li></ol><ul><li>用户打开一个恶意的链接</li><li>浏览器在dom解析的时候直接使用恶意数据</li><li>innerHTML、document.write…</li></ul><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><ul><li>实现xss攻击的恶意脚本就叫做payload</li><li>xss钓鱼–通过xss向网页注入钓鱼链接，引导用户访问</li><li>通过payload拿到用户的sessionId后，就可以伪造成用户，进行操作</li><li>因为sessionId是唯一标识–后台识别客户</li><li>用户登陆后，后台会返回一个sessionId存储在客户端的cookie中</li><li>以后客户端每次请求都会把该cookie带上请求后端</li><li>所以cookie泄露会有很大风险</li></ul><h3 id="如何防御xss"><a href="#如何防御xss" class="headerlink" title="如何防御xss"></a>如何防御xss</h3><ol><li>设置cookie的httpOnly属性</li><li>这样在客户端就不能通过document.cookie获取到cookie</li><li>但是不能根本解决</li><li>永远不要相信前端的过滤，后台一定要进行过滤</li><li>设置白名单</li><li>设置黑名单</li><li>在标签里面、在属性上、在url地址、在函数参数传参写入时再次进行一层htmlEncode过滤</li></ol><h3 id="URL编码"><a href="#URL编码" class="headerlink" title="URL编码"></a>URL编码</h3><ol><li>encodeURI编码url的不对&amp;等保留字与特殊字符编码</li><li>encodeURIComponent用来编码传递参数的以及&amp;特殊符号</li><li>对一个get url的参数处理往往是二者一起使用</li></ol><h3 id="CSRF-跨站请求伪造"><a href="#CSRF-跨站请求伪造" class="headerlink" title="CSRF 跨站请求伪造"></a>CSRF 跨站请求伪造</h3><ol><li>用户A登陆银行网站，登陆成功后拿到cookie</li><li>黑客诱导A登陆他的钓鱼网站</li><li>在钓鱼网站的内部内置了一个iframe，设置width、height分别为0，链接到一个transfer页面</li><li>transfer页面模拟用户A发请求转账到指定账户，因为这时候因为A并没有成功退出，所以他的cookie仍然有效，可以作为登陆凭证</li></ol><h3 id="防御CSRF"><a href="#防御CSRF" class="headerlink" title="防御CSRF"></a>防御CSRF</h3><ol><li>svg-captcha // nodejs生成验证码</li><li>给用户一个验证码，但是影响用户体验</li><li>通过请求头referer判断是否是自己的站点，不可靠</li><li>参数伪造token，最主流的防御CSRF</li></ol><h3 id="token"><a href="#token" class="headerlink" title="token"></a>token</h3><ol><li>一次性的</li><li>用户不知情</li></ol><h3 id="XSS-CSRF-蠕虫"><a href="#XSS-CSRF-蠕虫" class="headerlink" title="XSS+CSRF=蠕虫"></a>XSS+CSRF=蠕虫</h3><h3 id="DDOS攻击"><a href="#DDOS攻击" class="headerlink" title="DDOS攻击"></a>DDOS攻击</h3><ol><li>分布式拒绝服务</li><li>黑客控制大量肉鸡向目标主机发送非正常请求，导致其消耗资源不能为合法用户的访问提供正常服务</li></ol><h3 id="防止DDOS"><a href="#防止DDOS" class="headerlink" title="防止DDOS"></a>防止DDOS</h3><ol><li>验证码</li><li>限制一个IP请求频率</li><li>增加机器增加服务器带宽</li><li>设置自己的业务为分布式服务，防止单点攻击</li><li>提高服务器负载能力</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;常见web攻击方式&quot;&gt;&lt;a href=&quot;#常见web攻击方式&quot; class=&quot;headerlink&quot; title=&quot;常见web攻击方式&quot;&gt;&lt;/a&gt;常见web攻击方式&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;XSS-反射型&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;跨站脚本攻击&lt;/
      
    
    </summary>
    
    
      <category term="web安全" scheme="http://yoursite.com/tags/web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>encrypt</title>
    <link href="http://yoursite.com/2019/09/01/encrypt/"/>
    <id>http://yoursite.com/2019/09/01/encrypt/</id>
    <published>2019-09-01T08:10:05.000Z</published>
    <updated>2019-09-01T08:21:43.719Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常见的前端加密库"><a href="#常见的前端加密库" class="headerlink" title="常见的前端加密库"></a>常见的前端加密库</h3><ol><li><a href="https://github.com/brix/crypto-js" target="_blank" rel="noopener">crypto-js</a></li><li><a href="https://github.com/bitwiseshiftleft/sjcl" target="_blank" rel="noopener">sjcl</a></li><li><a href="https://blog-static.cnblogs.com/files/mofish/md5.js" target="_blank" rel="noopener">md5</a></li><li><a href="https://blog-static.cnblogs.com/files/mofish/sha1.js" target="_blank" rel="noopener">sha1哈希加密</a></li><li><a href="https://github.com/beatgammit/base64-js" target="_blank" rel="noopener">base64</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;常见的前端加密库&quot;&gt;&lt;a href=&quot;#常见的前端加密库&quot; class=&quot;headerlink&quot; title=&quot;常见的前端加密库&quot;&gt;&lt;/a&gt;常见的前端加密库&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/brix/crypto-
      
    
    </summary>
    
    
      <category term="前端加密" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%8A%A0%E5%AF%86/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>canvas</title>
    <link href="http://yoursite.com/2019/09/01/canvas/"/>
    <id>http://yoursite.com/2019/09/01/canvas/</id>
    <published>2019-09-01T07:11:25.000Z</published>
    <updated>2019-09-01T07:38:59.854Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ol><li>HTML5新标签</li><li>本身不具备绘画功能</li><li>是一个矩形区域的画布</li><li>拥有多种绘制图形图像的方法</li></ol><h3 id="应用领域"><a href="#应用领域" class="headerlink" title="应用领域"></a>应用领域</h3><ol><li>游戏</li><li>广告</li><li>可视化数据</li></ol><h3 id="设置宽高"><a href="#设置宽高" class="headerlink" title="设置宽高"></a>设置宽高</h3><ol><li>设置宽度和高度，通过属性设置，不要通过css设置</li><li>对于一个canvas标签来说，使用的时候一定要设置width和height属性，否则绘制的图形有问题</li></ol><h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><ol><li>IE9才支持</li><li>不支持会认为是div</li><li>兼容性写法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas&gt;</span><br><span class="line">  ie9以上才支持canvas，请升级浏览器</span><br><span class="line">  &lt;!-- flash --&gt;</span><br><span class="line">&lt;/canvas&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>拿到canvas标签</li><li>拿到上下文</li><li>绘制</li></ol><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ol><li>moveTo // 移动画笔到指定位置，不设置，没有位置</li><li>lineTo // 画线</li><li>stroke // 描边</li><li>closePath // 路径闭合</li><li>fill // 填充</li></ol><h3 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h3><ol><li>strokeStyle // 设置描边颜色</li><li>lineWidth // 线宽</li><li>fillStyle // 设置填充颜色</li></ol><h3 id="a"><a href="#a" class="headerlink" title="(a)"></a>(a)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a = function() &#123;</span><br><span class="line">  console.log(1)</span><br><span class="line">&#125;</span><br><span class="line">var b = (a) // b = f() &#123;console.log(1)&#125;</span><br><span class="line">b() // 1</span><br></pre></td></tr></table></figure><h3 id="绘制表格"><a href="#绘制表格" class="headerlink" title="绘制表格"></a>绘制表格</h3><ol><li></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;HTML5新标签&lt;/li&gt;
&lt;li&gt;本身不具备绘画功能&lt;/li&gt;
&lt;li&gt;是一个矩形区域的画布&lt;/li&gt;
&lt;li&gt;拥有多种绘制图
      
    
    </summary>
    
    
      <category term="canvas" scheme="http://yoursite.com/tags/canvas/"/>
    
      <category term="html5" scheme="http://yoursite.com/tags/html5/"/>
    
  </entry>
  
</feed>
